//
// Copyright (C) 2004 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: AEx3dNavigationInfoTemplate.mel
//
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//

global proc AEx3dNavigationInfoTemplateNew( string $attrName )
{
	string $nodeName[];
	tokenize($attrName, ".", $nodeName);
	setUITemplate -pst attributeEditorPresetsTemplate;
	if($nodeName[1] == "transitionType"){
		buildTransitionTypeInterface($nodeName[0], $attrName);
	}
	if($nodeName[1] == "type"){
		buildTypeInterface($nodeName[0], $attrName);
	}
	setUITemplate -ppt;
}

global proc AEx3dNavigationInfoTemplateReplace( string $attrName )
{
	string $nodeName[];
	tokenize($attrName, ".", $nodeName);
	if($nodeName[1] == "transitionType")
	{
		deleteUI -lay ttCol;
		buildTransitionTypeInterface($nodeName[0], $attrName);
	}
	if($nodeName[1] == "type")
	{
		deleteUI -lay tCol;
		buildTypeInterface($nodeName[0], $attrName);
	}
}

global proc AEx3dNavigationInfoTemplate( string $nodeName )
{
    editorTemplate -beginScrollLayout;
	editorTemplate -addControl "avatarSize";
	editorTemplate -addControl "headlight";
	editorTemplate -addControl "speed";
	editorTemplate -addControl "visibilityLimit";
	editorTemplate -beginLayout "Transition Types" -collapse false;
		editorTemplate -callCustom "AEx3dNavigationInfoTemplateNew" "AEx3dNavigationInfoTemplateReplace" "transitionType";
	editorTemplate -endLayout;
	editorTemplate -beginLayout "Navigation Types" -collapse false;
		editorTemplate -callCustom "AEx3dNavigationInfoTemplateNew" "AEx3dNavigationInfoTemplateReplace" "type";
	editorTemplate -endLayout;
	editorTemplate -aec -ecl "Extra Attributes";
	x3dOptionSuppression();
    editorTemplate -endLayout;
}

global proc buildTransitionTypeInterface(string $nodeName, string $attrName)
{
	columnLayout ttCol;
		rowLayout
			-nc 1
			-columnWidth1 440;
			text -l " " -h 5 -fn "smallBoldLabelFont" -rs true -al "left";
		setParent ..;
		
		rowLayout
			-nc 5
			-columnWidth5 190 10 30 10 190
			-cl5 "left" "left" "both" "right" "right";
			text -l "Transition Types Used" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
			text -l " " -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
			text -l " " -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
			text -l " " -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
			text -l "Transition Types Available" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
		setParent ..;
				
		rowLayout
			-nc 5
			-columnWidth5 190 10 30 10 190
			-cl5 "left" "left" "both" "right" "right";
			textScrollList -nr 10 -ams false -dkc ("removeTTValue " + $nodeName) ttValueList;
			string $vList[] = getTTList($nodeName);
			int $i;
			for($i=0; $i < size($vList); $i++)
			{
				textScrollList -e -a $vList[$i] ttValueList;
			}
			text -l " ";
			columnLayout;
				text -l " ";
				text -l " ";
				text -l " ";
				button -l " <-- " -c ("addTTValue " + $nodeName);
				text -l " ";
				text -l " ";
			setParent ..;
			text -l " ";
			textScrollList -nr 10 -ams false ttSList;
			string $ttList[] = {"TELEPORT", "LINEAR", "ANIMATE"};
			for($i=0; $i < size($ttList); $i++)
			{
				textScrollList -e -a $ttList[$i] ttSList;
			}
		setParent ..;
	setParent ..;
}

global proc addTTValue(string $nodeName)
{
	string $value[] = `textScrollList -q -si ttSList`;
	if($value[0] != "")
	{
		string $vList[] = getTTList($nodeName);
		int $hasIt = 0;
		int $i;
		for($i=0;$i<size($vList);$i++)
		{
			if($value[0] == $vList[$i]) $hasIt = 1;
		}

		if(!$hasIt)
		{
			int $vLength = `getAttr ($nodeName+".transitionType_cc")`;
			setAttr ($nodeName+".transitionType["+$vLength+"]") -type "string" $value[0];
			textScrollList -e -a $value[0] ttValueList;
			$vLength = $vLength+1;
			setAttr ($nodeName+".transitionType_cc") $vLength;
		}
	}
	evalDeferred("resetAE");
}

global proc removeTTValue(string $nodeName)
{
	int $vLength = `getAttr ($nodeName+".transitionType_cc")`;
	if(($vLength-1) >=0)
	{
		string $vString1[] = `textScrollList -q -si ttValueList`;
		int $vInt[] = `textScrollList -q -sii ttValueList`;
		string $vString2[];
		if($vString1[0] != "")
		{
			textScrollList -e -ra ttValueList;
			string $vList[] = getTTList($nodeName);
		
			int $j=0;
			int $i;
			for($i=0; $i<$vLength; $i++)
			{
				if($vString1[0] != $vList[$i])
				{
					$vString2[$j] = $vList[$i];	
					setAttr ($nodeName+".transitionType["+$j+"]") -type "string" $vString2[$j];
					textScrollList -e -a $vString2[$j] ttValueList;
					$j=$j+1;
				}
			}
			$vLength = $vLength-1;
			setAttr ($nodeName+".transitionType["+$vLength+"]") -type "string" "";
			setAttr ($nodeName+".transitionType_cc") $vLength;
			if($vLength != 0)
			{
				if($vInt[0]!=1) $vInt[0] = $vInt[0]-1;
				textScrollList -e -sii $vInt[0] ttValueList;
			}
		}
	}
	evalDeferred("resetAE");
}

global proc string[] getTTList(string $nodeName)
{
	string $vString[];
	string $vString2[];
	int $vLength = `getAttr ($nodeName+".transitionType_cc")`;
	int $i;
	for($i=0;$i<$vLength;$i++)
	{
		$vString[$i] = `getAttr ($nodeName+".transitionType["+$i+"]")`;
	}

	return $vString;
}

global proc buildTypeInterface(string $nodeName, string $attrName)
{
	columnLayout tCol;
		rowLayout
			-nc 1
			-columnWidth1 440;
			text -l " " -h 5 -fn "smallBoldLabelFont" -rs true -al "left";
		setParent ..;
		
		rowLayout
			-nc 5
			-columnWidth5 190 10 30 10 190
			-cl5 "left" "left" "both" "right" "right";
			text -l "Navigation Types Used" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
			text -l " " -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
			text -l " " -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
			text -l " " -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
			text -l "Navigation Types Available" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
		setParent ..;
				
		rowLayout
			-nc 5
			-columnWidth5 190 10 30 10 190
			-cl5 "left" "left" "both" "right" "right";
			textScrollList -nr 10 -ams false -dkc ("removeTValue " + $nodeName) tValueList;
			string $vtList[] = getTList($nodeName);
			int $vtSize = size($vtList);
			int $i;
			for($i=0; $i < $vtSize; $i++)
			{
				textScrollList -e -a $vtList[$i] tValueList;
			}
			text -l " ";
			columnLayout;
				text -l " ";
				text -l " ";
				text -l " ";
				button -l " <-- " -c ("addTValue " + $nodeName);
				text -l " ";
				text -l " ";
			setParent ..;
			text -l " ";
			textScrollList -nr 10 -ams false tSList;
			string $ntList[] = {"NONE", "ANY", "WALK", "FLY", "EXAMINE", "LOOKAT"};
			int $ntSize = size($ntList);
			for($i=0; $i < $ntSize; $i++)
			{
				textScrollList -e -a $ntList[$i] tSList;
			}
		setParent ..;
	setParent ..;
}

global proc addTValue(string $nodeName)
{
	string $value[] = `textScrollList -q -si tSList`;
	if($value[0] != "")
	{
		string $vtList[] = getTList($nodeName);
		int $hasIt = 0;
		int $vtSize = size($vtList);
		int $i;
		for($i=0;$i<$vtSize;$i++)
		{
			if($value[0] == $vtList[$i]) $hasIt = 1;
		}

		if(!$hasIt)
		{
			int $vLength = `getAttr ($nodeName+".type_cc")`;
			setAttr ($nodeName+".type["+$vLength+"]") -type "string" $value[0];
			textScrollList -e -a $value[0] ttValueList;
			$vLength = $vLength+1;
			setAttr ($nodeName+".type_cc") $vLength;
		}
	}
	evalDeferred("resetAE");
}

global proc removeTValue(string $nodeName)
{
	int $vLength = `getAttr ($nodeName+".type_cc")`;
	if(($vLength-1) >= 0)
	{
		string $vString1[] = `textScrollList -q -si tValueList`;
		int $vInt[] = `textScrollList -q -sii tValueList`;
		string $vString2[];
		if($vString1[0] != "")
		{
			textScrollList -e -ra tValueList;
			string $vList[] = getTList($nodeName);
			
			int $j=0;
			int $i;
			for($i=0; $i<$vLength; $i++)
			{
				if($vString1[0] != $vList[$i])
				{
					$vString2[$j] = $vList[$i];	
					setAttr ($nodeName+".type["+$j+"]") -type "string" $vString2[$j];
					textScrollList -e -a $vString2[$j] tValueList;
					$j=$j+1;
				}
			}
			$vLength = $vLength-1;
			setAttr ($nodeName+".type["+$vLength+"]") -type "string" "";
			setAttr ($nodeName+".type_cc") $vLength;
			if($vLength != 0)
			{
				if($vInt[0]!=1) $vInt[0] = $vInt[0]-1;
				textScrollList -e -sii $vInt[0] tValueList;
			}
			
		}
	}
	evalDeferred("resetAE");
}

global proc string[] getTList(string $nodeName)
{
	string $vString2[];

	int $vLength2 = `getAttr ($nodeName+".type_cc")`;
	int $i;
	for($i=0;$i<$vLength2;$i++)
	{
		$vString2[$i] = `getAttr ($nodeName+".type["+$i+"]")`;
	}

	return $vString2;
}

