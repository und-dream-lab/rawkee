//
// Copyright (C) 2004-2005 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_collisionsensor_tables.mel
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


//-------------------------------------------------------------------
//MEL string variables for setting X3D Routes
//-------------------------------------------------------------------
global string $eoMenu;
global string $eiMenu;
global string $eoFieldTypeX3D;
global string $ftCollisionSensorX3D[];
global string $inCollisionSensorX3D[];
global string $outCollisionSensorX3D[];
global string $ftX3DArray[];

//---------------------------------
//Array of Field Types for X3D CollisionSensor - table
//---------------------------------
$ftCollisionSensorX3D[0] =  "MFNode";    //[in,out] center           0 0 0    (-?,?)
$ftCollisionSensorX3D[1] =  "SFBool";   //[in,out] info				[]       [X3DChildNode]
$ftCollisionSensorX3D[2] =  "SFNode";     //[in,out] joints         []       [X3DChildNode]
$ftCollisionSensorX3D[3] =  "MFNode";   //[in,out] info				[]       [X3DChildNode]
$ftCollisionSensorX3D[4] =  "MFNode";   //[in,out] info				[]       [X3DChildNode]
$ftCollisionSensorX3D[5] =  "SFBool";   //[in,out] info				[]       [X3DChildNode]

//-----------------------------------
//Array of event names in for X3D CollisionSensor Field Types - table
//-----------------------------------
$inCollisionSensorX3D[0] =  "set_collidables";          //[in,out] center           0 0 0    (-?,?)
$inCollisionSensorX3D[1] =  "set_enabled";        //[in,out] info         []       [X3DChildNode]
$inCollisionSensorX3D[2] =  "set_metadata";        //[in,out] joints         []       [X3DChildNode]
$inCollisionSensorX3D[3] =  "intersections";        //[in,out] metadata         NULL     [X3DMetadataObject]
$inCollisionSensorX3D[4] =  "contacts";        //[in,out] metadata         NULL     [X3DMetadataObject]
$inCollisionSensorX3D[5] =  "isActive";        //[in,out] metadata         NULL     [X3DMetadataObject]

//-----------------------------------

//-----------------------------------
//Array of event names out for X3D CollisionSensor Field Types - table
//-----------------------------------
$outCollisionSensorX3D[0] =  "collidables_changed";          //[in,out] center           0 0 0    (-?,?)
$outCollisionSensorX3D[1] =  "enabled_changed";        //[in,out] info         []       [X3DChildNode]
$outCollisionSensorX3D[2] =  "metadata_changed";        //[in,out] joints         []       [X3DChildNode]
$outCollisionSensorX3D[3] =  "intersections";        //[in,out] metadata         NULL     [X3DMetadataObject]
$outCollisionSensorX3D[4] =  "contacts";        //[in,out] metadata         NULL     [X3DMetadataObject]
$outCollisionSensorX3D[5] =  "isActive";        //[in,out] metadata         NULL     [X3DMetadataObject]

//-----------------------------------

//-----------------------------------
//Array of event commands for X3D CollisionSensor  - table
//-----------------------------------

//-----------------------------------

//-----------------------------------
//Procedures for building menus for
//CollisionSensor Events
//-----------------------------------
//-------------------------------------------------------------------------
//Building the CollisionSensor eventOut submenu
global proc buildCollisionSensorEOMenu(string $highlighted)
{
	global string $eoMenu;
	//nTranformX3D[] size = 6 (0-5); eventOut fields are 0-5;
	global string $ftCollisionSensorX3D[];
	global string $outCollisionSensorX3D[];
	global string $eoFieldTypeX3D;

	int $esi;
	for($esi = 0; $esi < 6; $esi++){
		menuItem -l $outCollisionSensorX3D[$esi] -parent $eoMenu -c ("processMenuX3D " + $highlighted + " " + $outCollisionSensorX3D[$esi] + " " + $ftCollisionSensorX3D[$esi] + " 0");
	}
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Building the CollisionSensor eventIn submenu
global proc buildCollisionSensorEIMenu(string $highlighted)
{
	global string $eiMenu;
	//nCollisionSensorX3D[] size = 6 (0-5); eventIn fields are 0-2;
	global string $ftCollisionSensorX3D[];
	global string $inCollisionSensorX3D[];
	global string $eoFieldTypeX3D;

		
	int $esi;
	for($esi=0;$esi<3;$esi++){
		if($eoFieldTypeX3D == $ftCollisionSensorX3D[$esi])
		{
			menuItem -l $inCollisionSensorX3D[$esi] -parent $eiMenu -c ("processMenuX3D " + $highlighted + " " + $inCollisionSensorX3D[$esi] + " " + $ftCollisionSensorX3D[$esi] + " 1");
		}
	}
	
	menuItem -divider true;
	menuItem -l "Reset" -parent $eiMenu -c "resetX3DRoutes";
}
//-------------------------------------------------------------------------

