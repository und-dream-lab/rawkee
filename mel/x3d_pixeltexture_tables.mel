//
// Copyright (C) 2004-2005 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_pixeltexture_tables.mel
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


//-------------------------------------------------------------------
//MEL string variables for setting X3D Routes
//-------------------------------------------------------------------
global string $eoMenu;
global string $eiMenu;
global string $eoFieldTypeX3D;
global string $ftPixelTextureX3D[];
global string $inPixelTextureX3D[];
global string $outPixelTextureX3D[];

//---------------------------------
//Array of Field Types for X3D PixelTexture - table
//---------------------------------
$ftPixelTextureX3D[0] =  "SFImage";
$ftPixelTextureX3D[1] =  "SFNode";

//-----------------------------------
//Array of event in names for X3D PixelTexture Field Types - table
//-----------------------------------
$inPixelTextureX3D[0] =  "set_image";			//[in,out]
$inPixelTextureX3D[1] =  "set_metadata";				//[in,out]

//-----------------------------------

//-----------------------------------
//Array of event out names for X3D PixelTexture Field Types - table
//-----------------------------------
$outPixelTextureX3D[0] =  "image_changed";	//[in,out]
$outPixelTextureX3D[1] =  "metadata_changed";		//[in,out]

//-----------------------------------

//-----------------------------------
//Array of event commands for X3D PixelTexture  - table
//-----------------------------------

//-----------------------------------

//-----------------------------------
//Procedures for building menus for
//PixelTexture Events
//-----------------------------------
//-------------------------------------------------------------------------
//Building the PixelTexture eventOut submenu
global proc buildPixelTextureEOMenu(string $highlighted)
{
	global string $eoMenu;
	global string $ftPixelTextureX3D[];
	global string $outPixelTextureX3D[];
	global string $eoFieldTypeX3D;

	int $esi;
	for($esi = 0; $esi < 2; $esi++){
		menuItem -l $outPixelTextureX3D[$esi] -parent $eoMenu -c ("processMenuX3D " + $highlighted + " " + $outPixelTextureX3D[$esi] + " " + $ftPixelTextureX3D[$esi] + " 0");
	}
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Building the PixelTexture eventIn submenu
global proc buildPixelTextureEIMenu(string $highlighted)
{
	global string $eiMenu;
	global string $ftPixelTextureX3D[];
	global string $inPixelTextureX3D[];
	global string $eoFieldTypeX3D;

		
	int $esi;
	for($esi=0;$esi<2;$esi++){
		if($eoFieldTypeX3D == $ftPixelTextureX3D[$esi])
		{
			menuItem -l $inPixelTextureX3D[$esi] -parent $eiMenu -c ("processMenuX3D " + $highlighted + " " + $inPixelTextureX3D[$esi] + " " + $ftPixelTextureX3D[$esi] + " 1");
		}
	}
	
	menuItem -divider true;
	menuItem -l "Reset" -parent $eiMenu -c "resetX3DRoutes";
}
//-------------------------------------------------------------------------


