//
// Copyright (C) 2004-2005 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_rigidbodycollection_tables.mel
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


//-------------------------------------------------------------------
//MEL string variables for setting X3D Routes
//-------------------------------------------------------------------
global string $eoMenu;
global string $eiMenu;
global string $eoFieldTypeX3D;
global string $ftRigidBodyCollectionX3D[];
global string $inRigidBodyCollectionX3D[];
global string $outRigidBodyCollectionX3D[];
global string $ftX3DArray[];

//---------------------------------
//Array of Field Types for X3D RigidBodyCollection - table
//---------------------------------
$ftRigidBodyCollectionX3D[0] =  "MFNode";    //[in,out] center           0 0 0    (-?,?)
$ftRigidBodyCollectionX3D[1] =  "SFBool";   //[in,out] info				[]       [X3DChildNode]
$ftRigidBodyCollectionX3D[2] =  "MFNode";     //[in,out] joints         []       [X3DChildNode]
$ftRigidBodyCollectionX3D[3] =  "SFFloat";   //[in,out] info				[]       [X3DChildNode]
$ftRigidBodyCollectionX3D[4] =  "SFFloat"; //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$ftRigidBodyCollectionX3D[5] =  "SFFloat";    //[in,out] scale            1 1 1    (0,?)
$ftRigidBodyCollectionX3D[6] =  "SFFloat"; //[in,out] scaleOrientation 0 0 1 0  [-1,1] or (-?,?)
$ftRigidBodyCollectionX3D[7] =  "SFFloat";     //[in,out] joints         []       [X3DChildNode]
$ftRigidBodyCollectionX3D[8] =  "SFBool";     //[in,out] joints         []       [X3DChildNode]
$ftRigidBodyCollectionX3D[9] =  "SFFloat";     //[in,out] joints         []       [X3DChildNode]
$ftRigidBodyCollectionX3D[10] =  "SFVec3f";     //[in,out] joints         []       [X3DChildNode]
$ftRigidBodyCollectionX3D[11] =  "SFInt32";     //[in,out] joints         []       [X3DChildNode]
$ftRigidBodyCollectionX3D[12] =  "MFNode";     //[in,out] joints         []       [X3DChildNode]
$ftRigidBodyCollectionX3D[13] =  "SFFloat";    //[in,out] translation      0 0 0    (-?,?)
$ftRigidBodyCollectionX3D[14] =  "SFNode";   //[in,out] info				[]       [X3DChildNode]
$ftRigidBodyCollectionX3D[15] =  "SFBool";     //[in,out] joints         []       [X3DChildNode]

//-----------------------------------
//Array of event names in for X3D RigidBodyCollection Field Types - table
//-----------------------------------
$inRigidBodyCollectionX3D[0] =  "set_contacts";          //[in,out] center           0 0 0    (-?,?)
$inRigidBodyCollectionX3D[1] =  "set_autoDisable";        //[in,out] info         []       [X3DChildNode]
$inRigidBodyCollectionX3D[2] =  "set_bodies";        //[in,out] joints         []       [X3DChildNode]
$inRigidBodyCollectionX3D[3] =  "set_constantForceMix";        //[in,out] metadata         NULL     [X3DMetadataObject]
$inRigidBodyCollectionX3D[4] =  "set_contactSurfaceThickness";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$inRigidBodyCollectionX3D[5] =  "set_disableAngularSpeed";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$inRigidBodyCollectionX3D[6] =  "set_disableLinearSpeed";           //[in,out] scale            1 1 1    (0,?)
$inRigidBodyCollectionX3D[7] =  "set_disableTime";//[in,out] scaleOrientation 0 0 1 0  [-1,1] or (-?,?)
$inRigidBodyCollectionX3D[8] =  "set_enabled";     //[in,out] joints         []       [X3DChildNode]
$inRigidBodyCollectionX3D[9] =  "set_errorCorrection";     //[in,out] joints         []       [X3DChildNode]
$inRigidBodyCollectionX3D[10] =  "set_gravity";     //[in,out] joints         []       [X3DChildNode]
$inRigidBodyCollectionX3D[11] =  "set_iterations";     //[in,out] joints         []       [X3DChildNode]
$inRigidBodyCollectionX3D[12] =  "set_joints";     //[in,out] joints         []       [X3DChildNode]
$inRigidBodyCollectionX3D[13] =  "set_maxCorrectionSpeed";     //[in,out] joints         []       [X3DChildNode]
$inRigidBodyCollectionX3D[14] =  "set_metadata";     //[in,out] translation      0 0 0    (-?,?)
$inRigidBodyCollectionX3D[15] =  "set_preferAccuracy";     //[in,out] translation      0 0 0    (-?,?)

//-----------------------------------

//-----------------------------------
//Array of event names out for X3D RigidBodyCollection Field Types - table
//-----------------------------------
$outRigidBodyCollectionX3D[0] =  "set_contacts";          //[in,out] center           0 0 0    (-?,?)
$outRigidBodyCollectionX3D[1] =  "autoDisable_changed";        //[in,out] info         []       [X3DChildNode]
$outRigidBodyCollectionX3D[2] =  "bodies_changed";        //[in,out] joints         []       [X3DChildNode]
$outRigidBodyCollectionX3D[3] =  "constantForceMix_changed";        //[in,out] metadata         NULL     [X3DMetadataObject]
$outRigidBodyCollectionX3D[4] =  "contactSurfaceThickness_changed";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$outRigidBodyCollectionX3D[5] =  "disableAngularSpeed_changed";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$outRigidBodyCollectionX3D[6] =  "disableLinearSpeed_changed";           //[in,out] scale            1 1 1    (0,?)
$outRigidBodyCollectionX3D[7] =  "disableTime_changed";//[in,out] scaleOrientation 0 0 1 0  [-1,1] or (-?,?)
$outRigidBodyCollectionX3D[8] =  "enabled_changed";     //[in,out] joints         []       [X3DChildNode]
$outRigidBodyCollectionX3D[9] =  "errorCorrection_changed";     //[in,out] joints         []       [X3DChildNode]
$outRigidBodyCollectionX3D[10] =  "gravity_changed";     //[in,out] joints         []       [X3DChildNode]
$outRigidBodyCollectionX3D[11] =  "iterations_changed";     //[in,out] joints         []       [X3DChildNode]
$outRigidBodyCollectionX3D[12] =  "joints_changed";     //[in,out] joints         []       [X3DChildNode]
$outRigidBodyCollectionX3D[13] =  "maxCorrectionSpeed_changed";     //[in,out] joints         []       [X3DChildNode]
$outRigidBodyCollectionX3D[14] =  "metadata_changed";     //[in,out] translation      0 0 0    (-?,?)
$outRigidBodyCollectionX3D[15] =  "preferAccuracy_changed";     //[in,out] translation      0 0 0    (-?,?)

//-----------------------------------

//-----------------------------------
//Array of event commands for X3D RigidBodyCollection  - table
//-----------------------------------

//-----------------------------------

//-----------------------------------
//Procedures for building menus for
//RigidBodyCollection Events
//-----------------------------------
//-------------------------------------------------------------------------
//Building the RigidBodyCollection eventOut submenu
global proc buildRigidBodyCollectionEOMenu(string $highlighted)
{
	global string $eoMenu;
	//nTranformX3D[] size = 16 (0-15); eventOut fields are 1-15;
	global string $ftRigidBodyCollectionX3D[];
	global string $outRigidBodyCollectionX3D[];
	global string $eoFieldTypeX3D;

	int $esi;
	for($esi = 1; $esi < 16; $esi++){
		menuItem -l $outRigidBodyCollectionX3D[$esi] -parent $eoMenu -c ("processMenuX3D " + $highlighted + " " + $outRigidBodyCollectionX3D[$esi] + " " + $ftRigidBodyCollectionX3D[$esi] + " 0");
	}
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Building the RigidBodyCollection eventIn submenu
global proc buildRigidBodyCollectionEIMenu(string $highlighted)
{
	global string $eiMenu;
	//nRigidBodyCollectionX3D[] size =16 (0-15); eventIn fields are 0-15;
	global string $ftRigidBodyCollectionX3D[];
	global string $inRigidBodyCollectionX3D[];
	global string $eoFieldTypeX3D;

		
	int $esi;
	for($esi=0;$esi<16;$esi++){
		if($eoFieldTypeX3D == $ftRigidBodyCollectionX3D[$esi])
		{
			menuItem -l $inRigidBodyCollectionX3D[$esi] -parent $eiMenu -c ("processMenuX3D " + $highlighted + " " + $inRigidBodyCollectionX3D[$esi] + " " + $ftRigidBodyCollectionX3D[$esi] + " 1");
		}
	}
	
	menuItem -divider true;
	menuItem -l "Reset" -parent $eiMenu -c "resetX3DRoutes";
}
//-------------------------------------------------------------------------

