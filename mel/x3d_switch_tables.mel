//
// Copyright (C) 2004 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_switch_tables.mel
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


//-------------------------------------------------------------------
//MEL string variables for setting X3D Routes
//-------------------------------------------------------------------
global string $eoMenu;
global string $eiMenu;
global string $eoFieldTypeX3D;
global string $ftSwitchX3D[];
global string $inSwitchX3D[];
global string $outSwitchX3D[];

//---------------------------------
//Array of Field Types for X3D Switches - table
//---------------------------------
$ftSwitchX3D[0] =  "MFNode";     //[in]     addChildren               [X3DChildNode]
$ftSwitchX3D[1] =  "MFNode";     //[in]     removeChildren            [X3DChildNode]
$ftSwitchX3D[2] =  "MFNode";     //[in,out] children         []       [X3DChildNode]
$ftSwitchX3D[3] =  "SFNode";     //[in,out] metadata         NULL     [X3DMetadataObject]
$ftSwitchX3D[4] =  "SFInt32";	 // [in,out] whichChoice    -1       [-1,?)
//-----------------------------------
//Array of event names in for X3D Switch Field Types - table
//-----------------------------------
$inSwitchX3D[0] =  "addChildren";     	 //[in]     addChildren               [X3DChildNode]
$inSwitchX3D[1] =  "removeChildren";  	 //[in]     removeChildren            [X3DChildNode]
$inSwitchX3D[2] =  "set_children";        //[in,out] children         []       [X3DChildNode]
$inSwitchX3D[3] =  "set_metadata";        //[in,out] metadata         NULL     [X3DMetadataObject]
$inSwitchX3D[4] =  "set_whichChoice";
//-----------------------------------

//-----------------------------------
//Array of event names out for X3D Switch Field Types - table
//-----------------------------------
$outSwitchX3D[0] =  "addChildren";     		  //[in]     addChildren               [X3DChildNode]
$outSwitchX3D[1] =  "removeChildren";  		  //[in]     removeChildren            [X3DChildNode]
$outSwitchX3D[2] =  "children_changed";        //[in,out] children         []       [X3DChildNode]
$outSwitchX3D[3] =  "metadata_changed";        //[in,out] metadata         NULL     [X3DMetadataObject]
$outSwitchX3D[4] =  "whichChoice_changed";
//-----------------------------------

//-----------------------------------
//Procedures for building menus for
//Switch Events
//-----------------------------------
//-------------------------------------------------------------------------
//Building the group eventOut submenu
global proc buildSwitchEOMenu(string $highlighted)
{
	global string $eoMenu;
	
	global string $ftSwitchX3D[];
	global string $outSwitchX3D[];
	global string $eoFieldTypeX3D;

	int $esi;
	for($esi = 2; $esi < 5; $esi++){
		menuItem -l $outSwitchX3D[$esi] -parent $eoMenu -c ("processMenuX3D " + $highlighted + " " + $outSwitchX3D[$esi] + " " + $ftSwitchX3D[$esi] + " 0");
	}
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Building the group eventIn submenu
global proc buildSwitchEIMenu(string $highlighted)
{
	global string $eiMenu;
	//nSwitchX3D[] size =5 (0-4); eventIn fields are 0-4;
	global string $ftSwitchX3D[];
	global string $inSwitchX3D[];
	global string $eoFieldTypeX3D;

		
	int $esi;
	for($esi=0;$esi<5;$esi++){
		if($eoFieldTypeX3D == $ftSwitchX3D[$esi])
		{
			menuItem -l $inSwitchX3D[$esi] -parent $eiMenu -c ("processMenuX3D " + $highlighted + " " + $inSwitchX3D[$esi] + " " + $ftSwitchX3D[$esi] + " 1");
		}
	}
	
	menuItem -divider true;
	menuItem -l "Reset" -parent $eiMenu -c "resetX3DRoutes";
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Procedure for updating all x3dSwitch node children visibility
//-------------------------------------------------------------------------
global proc updateAllx3dSwitchNodes()
{
	string $switchList[] = `lsType "x3dSwitch"`;
	int $swSize = size($switchList);
	int $i;
	for($i=0;$i<$swSize-1;$i++)
	{
		int $dumpInt = `getAttr ($switchList[$i]+".udChoice")`;
	}
}

//-------------------------------------------------------------------------
//Procedure for setting the visibility of the children of the Switch Node
//-------------------------------------------------------------------------
global proc setSwitchChildVisibility(int $whichChoice, int $switchId)
{
	string $transList[] = `lsType "transform"`;
	int $tlSize = size($transList);
	int $i;
	int $selId = -1;
	
	for($i=0; $i<$tlSize-1;$i++)
	{
		if(`attributeExists "switchId" $transList[$i]`)
		{
			int $testId = `getAttr ($transList[$i]+".switchId")`;
			if($testId == $switchId)
			{
				$selId = $i;
				$i = $tlSize;
			}
		}
	}
	
	if($selId > -1)
	{
		string $switchChildren[] = `listRelatives -c $transList[$selId]`;
		int $scSize = size($switchChildren);
		
		for($i=0; $i<$scSize; $i++)
		{
			if(`attributeExists "visibility" $switchChildren[$i]`) setAttr ($switchChildren[$i]+".visibility") 0;
		}
		string $sWhich = $whichChoice;
		
		switch($sWhich)
		{
			case "-2":
				for($i=0; $i<$scSize; $i++)
				{
					if(`attributeExists "visibility" $switchChildren[$i]`) setAttr ($switchChildren[$i]+".visibility") 1;
				}
				break;
				
			default:
				if($whichChoice > -1)
				{
					if(`attributeExists "visibility" $switchChildren[$whichChoice]`) setAttr ($switchChildren[$whichChoice]+".visibility") 1;
				}
				break;
		}
	}
}
