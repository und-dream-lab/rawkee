//
// Copyright (C) 2004 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_proximitysensor_tables.mel
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


//-------------------------------------------------------------------
//MEL string variables for setting X3D Routes
//-------------------------------------------------------------------
global string $eoMenu;
global string $eiMenu;
global string $eoFieldTypeX3D;
global string $ftProximitySensorX3D[];
global string $outProximitySensorX3D[];
global string $inProximitySensorX3D[];

//---------------------------------
//Array of Field Types for X3D ProximitySensor - table
//---------------------------------
$ftProximitySensorX3D[0] =  "SFVec3f";
$ftProximitySensorX3D[1] =  "SFBool";
$ftProximitySensorX3D[2] =  "SFNode";
$ftProximitySensorX3D[3] =  "SFVec3f";
$ftProximitySensorX3D[4] =  "SFTime";
$ftProximitySensorX3D[5] =  "SFTime";
$ftProximitySensorX3D[6] =  "SFVec3f";
$ftProximitySensorX3D[7] =  "SFBool";
$ftProximitySensorX3D[8] =  "SFRotation";
$ftProximitySensorX3D[9] =  "SFVec3f";

//-----------------------------------
//Array of event in names for X3D ProximitySensor Field Types - table
//-----------------------------------
$inProximitySensorX3D[0] =  "set_center";	//[in,out]
$inProximitySensorX3D[1] =  "set_enabled";		//[in,out]
$inProximitySensorX3D[2] =  "set_metadata";			//[in,out]
$inProximitySensorX3D[3] =  "set_size";		//[in,out]
$inProximitySensorX3D[4] =  "enterTime";		//[in,out]
$inProximitySensorX3D[5] =  "exitTime";	//[in,out]
$inProximitySensorX3D[6] =  "centerOfRotation_changed";		//[in,out]
$inProximitySensorX3D[7] =  "isActive";		//[in,out]
$inProximitySensorX3D[8] =  "orientation_changed";			//[out]
$inProximitySensorX3D[9] =  "position_changed";		//[out]

//-----------------------------------

//-----------------------------------
//Array of event out names for X3D ProximitySensor Field Types - table
//-----------------------------------
$outProximitySensorX3D[0] =  "center_changed";	//[in,out]
$outProximitySensorX3D[1] =  "enabled_changed";			//[in,out]
$outProximitySensorX3D[2] =  "metadata_changed";				//[in,out]
$outProximitySensorX3D[3] =  "size_changed";			//[in,out]
$outProximitySensorX3D[4] =  "enterTime";		//[in,out]
$outProximitySensorX3D[5] =  "exitTime";		//[in,out]
$outProximitySensorX3D[6] =  "centerOfRotation_changed";		//[in,out]
$outProximitySensorX3D[7] =  "isActive";			//[in,out]
$outProximitySensorX3D[8] =  "orientation_changed";				//[out]
$outProximitySensorX3D[9] =  "position_changed";				//[out]

//-----------------------------------

//-----------------------------------
//Array of event commands for X3D ProximitySensor  - table
//-----------------------------------

//-----------------------------------

//-----------------------------------
//Procedures for building menus for
//ProximitySensor Events
//-----------------------------------
//-------------------------------------------------------------------------
//Building the ProximitySensor eventOut submenu
global proc buildProximitySensorEOMenu(string $highlighted)
{
	global string $eoMenu;
	//nProximitySensorX3D[] size = 10 (0-9); eventOut fields are 0-13;
	global string $ftProximitySensorX3D[];
	global string $outProximitySensorX3D[];
	global string $eoFieldTypeX3D;

	int $esi;
	for($esi = 0; $esi < 10; $esi++){
		menuItem -l $outProximitySensorX3D[$esi] -parent $eoMenu -c ("processMenuX3D " + $highlighted + " " + $outProximitySensorX3D[$esi] + " " + $ftProximitySensorX3D[$esi] + " 0");
	}
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Building the ProximitySensor eventIn submenu
global proc buildProximitySensorEIMenu(string $highlighted)
{
	global string $eiMenu;
	//nProximitySensorX3D[] size = 10 (0-9); eventIn fields are 0-3;
	global string $ftProximitySensorX3D[];
	global string $inProximitySensorX3D[];
	global string $eoFieldTypeX3D;

		
	int $esi;
	for($esi=0;$esi<4;$esi++){
		if($eoFieldTypeX3D == $ftProximitySensorX3D[$esi])
		{
			menuItem -l $inProximitySensorX3D[$esi] -parent $eiMenu -c ("processMenuX3D " + $highlighted + " " + $inProximitySensorX3D[$esi] + " " + $ftProximitySensorX3D[$esi] + " 1");
		}
	}
	
	menuItem -divider true;
	menuItem -l "Reset" -parent $eiMenu -c "resetX3DRoutes";
}
//-------------------------------------------------------------------------


