//
// Copyright (C) 2004 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_collision_tables.mel
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


//-------------------------------------------------------------------
//MEL string variables for setting X3D Routes
//-------------------------------------------------------------------
global string $eoMenu;
global string $eiMenu;
global string $eoFieldTypeX3D;
global string $ftCollisionX3D[];
global string $inCollisionX3D[];
global string $outCollisionX3D[];

//---------------------------------
//Array of Field Types for X3D Collisiones - table
//---------------------------------
$ftCollisionX3D[0] =  "MFNode";     //[in]     addChildren               [X3DChildNode]
$ftCollisionX3D[1] =  "MFNode";     //[in]     removeChildren            [X3DChildNode]
$ftCollisionX3D[2] =  "SFBool";	 //[in,out] enabled
$ftCollisionX3D[3] =  "MFNode";     //[in,out] children         []       [X3DChildNode]
$ftCollisionX3D[4] =  "SFNode";     //[in,out] metadata         NULL     [X3DMetadataObject]
$ftCollisionX3D[5] =  "SFTime";	 //[out] collideTime
$ftCollisionX3D[6] =  "SFBool";	 //[out] isActive

//-----------------------------------
//Array of event names in for X3D Collision Field Types - table
//-----------------------------------
$inCollisionX3D[0] =  "addChildren";     	 //[in]     addChildren               [X3DChildNode]
$inCollisionX3D[1] =  "removeChildren";  	 //[in]     removeChildren            [X3DChildNode]
$inCollisionX3D[2] =  "set_children";        //[in,out] children         []       [X3DChildNode]
$inCollisionX3D[3] =  "set_enabled";
$inCollisionX3D[4] =  "set_metadata";        //[in,out] metadata         NULL     [X3DMetadataObject]
$inCollisionX3D[5] =  "collideTime";
$inCollisionX3D[6] =  "isActive";
//-----------------------------------

//-----------------------------------
//Array of event names out for X3D Collision Field Types - table
//-----------------------------------
$outCollisionX3D[0] =  "addChildren";     		  //[in]     addChildren               [X3DChildNode]
$outCollisionX3D[1] =  "removeChildren";  		  //[in]     removeChildren            [X3DChildNode]
$outCollisionX3D[2] =  "children_changed";        //[in,out] children         []       [X3DChildNode]
$outCollisionX3D[3] =  "enabled_changed";
$outCollisionX3D[4] =  "metadata_changed";        //[in,out] metadata         NULL     [X3DMetadataObject]
$outCollisionX3D[5] =  "collideTime";
$outCollisionX3D[6] =  "isActive";
//-----------------------------------

//-----------------------------------
//Procedures for building menus for
//Collision Events
//-----------------------------------
//-------------------------------------------------------------------------
//Building the group eventOut submenu
global proc buildCollisionEOMenu(string $highlighted)
{
	global string $eoMenu;
	
	global string $ftCollisionX3D[];
	global string $outCollisionX3D[];
	global string $eoFieldTypeX3D;

	int $esi;
	for($esi = 2; $esi < 7; $esi++){
		menuItem -l $outCollisionX3D[$esi] -parent $eoMenu -c ("processMenuX3D " + $highlighted + " " + $outCollisionX3D[$esi] + " " + $ftCollisionX3D[$esi] + " 0");
	}
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Building the group eventIn submenu
global proc buildCollisionEIMenu(string $highlighted)
{
	global string $eiMenu;
	//nCollisionX3D[] size =7 (0-4); eventIn fields are 0-4;
	global string $ftCollisionX3D[];
	global string $inCollisionX3D[];
	global string $eoFieldTypeX3D;

		
	int $esi;
	for($esi=0;$esi<5;$esi++){
		if($eoFieldTypeX3D == $ftCollisionX3D[$esi])
		{
			menuItem -l $inCollisionX3D[$esi] -parent $eiMenu -c ("processMenuX3D " + $highlighted + " " + $inCollisionX3D[$esi] + " " + $ftCollisionX3D[$esi] + " 1");
		}
	}
	
	menuItem -divider true;
	menuItem -l "Reset" -parent $eiMenu -c "resetX3DRoutes";
}
//-------------------------------------------------------------------------
