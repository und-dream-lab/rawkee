//
// Copyright (C) 2004-2005 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: AEx3dMetadataIntegerTemplate.mel
//
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//

global proc AEx3dMetadataIntegerTemplateNew( string $attrName )
{
	string $nodeName[];
	tokenize($attrName, ".", $nodeName);
	setUITemplate -pst attributeEditorPresetsTemplate;
	if($nodeName[1] == "value_cc"){
		buildMetaIntValueButton($nodeName[0], $attrName);
	}

	if($nodeName[1] == "value")
	{
		buildMetaIntValues($nodeName[0], $attrName);
	}
	setUITemplate -ppt;
}

global proc AEx3dMetadataIntegerTemplateReplace( string $attrName )
{
	string $nodeName[];
	tokenize($attrName, ".", $nodeName);
	if($nodeName[1] == "valuButton")
	{
		deleteUI -lay vbRow1;
		deleteUI -lay vbRow2;
		buildMetaIntValueButton($nodeName[0], $attrName);
	}
	if($nodeName[1] == "value")
	{
		deleteUI -lay valRow;
		buildMetaIntValues($nodeName[0], $attrName);
	}
	
}

global proc AEx3dMetadataIntegerTemplate( string $nodeName )
{
	editorTemplate -beginScrollLayout;
		editorTemplate -addControl "name";
		editorTemplate -addControl "reference";
		editorTemplate -callCustom "AEx3dMetadataIntegerTemplateNew" "AEx3dMetadataIntegerTemplateReplace" "value_cc";
		editorTemplate -callCustom "AEx3dMetadataIntegerTemplateNew" "AEx3dMetadataIntegerTemplateReplace" "value";
		editorTemplate -aec -ecl "Extra Attributes";
		editorTemplate -suppress "value_cc";
		editorTemplate -suppress "value";
		editorTemplate -suppress "x3dMetadataIn";
		editorTemplate -suppress "x3dMetadataOut";
		x3dOptionSuppression();
	editorTemplate -endLayout;
}

global proc	buildMetaIntValues(string $nodeName, string $fullAttr)
{
	rowLayout
		-nc 1
		-cw1 450
		-cl1 "left" valRow;
		columnLayout;
			int $len = `getAttr ($nodeName+".value_cc")`;
			int $i;
	
			for($i=0;$i<$len;$i++)
			{
				int $iVal = `getAttr ($nodeName+".value["+$i+"]")`;
				rowLayout
					-nc 4
					-cw4 10 60 370 10
					-cl4 "left" "left" "left" "left";
					text -l " " -w 10;
					intField -v $iVal -w 60 -cc ("changeX3DMetaInt "+$nodeName+" "+$i) -ec ("changeX3DMetaInt "+$nodeName+" "+$i) ("iField"+$i);
					text -l " " -w 10;
					text -l " " -w 10;
				setParent ..;
			}
}

global proc changeX3DMetaInt(string $nodeName, string $index)
{
	int $i = (int)$index;
	int $iVal = `intField -q -v ("iField"+$i)`;
	setAttr ($nodeName+".value["+$i+"]") $iVal;
	
}

global proc	buildMetaIntValueButton(string $nodeName, string $fullAttr)
{
	string $keyString = `getAttr $fullAttr`;
	
	rowLayout
		-nc 3
		-columnWidth3 10 400 40
		-cl3 "left" "left" "left" vbRow1;
		text -l " ";
		text -l " " -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
		text -l " ";
	setParent ..;
	
	rowLayout
		-nc 5
		-columnWidth5 100 100 50 100 100
		-cl5 "left" "center" "center" "center" "left" vbRow2;
		text -l " ";
		button -l "Add a value" -c ("addMetaIntValue "+$nodeName);
		text -l " ";
		button -l "Remove a value" -c ("removeMetaIntValue "+$nodeName);
		text -l " ";
	setParent ..;
	
}

global proc addMetaIntValue(string $nodeName)
{
	int $vLength = `getAttr ($nodeName+".value_cc")`;
	$vLength = $vLength + 1;
	setAttr ($nodeName+".value_cc") $vLength;
	forceAERefresh($nodeName);
}

global proc removeMetaIntValue(string $nodeName)
{
	int $vLength = `getAttr ($nodeName+".value_cc")`;
	if($vLength > 0)
	{
		$vLength = $vLength -1;
		setAttr ($nodeName+".value_cc") $vLength;
		forceAERefresh($nodeName);
	}
}