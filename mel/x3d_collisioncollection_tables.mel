//
// Copyright (C) 2004-2005 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_collisioncollection_tables.mel
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


//-------------------------------------------------------------------
//MEL string variables for setting X3D Routes
//-------------------------------------------------------------------
global string $eoMenu;
global string $eiMenu;
global string $eoFieldTypeX3D;
global string $ftCollisionCollectionX3D[];
global string $inCollisionCollectionX3D[];
global string $outCollisionCollectionX3D[];
global string $ftX3DArray[];

//---------------------------------
//Array of Field Types for X3D CollisionCollection - table
//---------------------------------
$ftCollisionCollectionX3D[0] =  "MFString";    //[in,out] center           0 0 0    (-?,?)
$ftCollisionCollectionX3D[1] =  "SFFloat";   //[in,out] info				[]       [X3DChildNode]
$ftCollisionCollectionX3D[2] =  "MFNode";     //[in,out] joints         []       [X3DChildNode]
$ftCollisionCollectionX3D[3] =  "SFBool";   //[in,out] info				[]       [X3DChildNode]
$ftCollisionCollectionX3D[4] =  "SFVec2f"; //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$ftCollisionCollectionX3D[5] =  "SFNode";    //[in,out] scale            1 1 1    (0,?)
$ftCollisionCollectionX3D[6] =  "SFFloat"; //[in,out] scaleOrientation 0 0 1 0  [-1,1] or (-?,?)
$ftCollisionCollectionX3D[7] =  "SFVec2f";     //[in,out] joints         []       [X3DChildNode]
$ftCollisionCollectionX3D[8] =  "SFVec2f";     //[in,out] joints         []       [X3DChildNode]
$ftCollisionCollectionX3D[9] =  "SFFloat";     //[in,out] joints         []       [X3DChildNode]
$ftCollisionCollectionX3D[10] =  "SFFloat";     //[in,out] joints         []       [X3DChildNode]

//-----------------------------------
//Array of event names in for X3D CollisionCollection Field Types - table
//-----------------------------------
$inCollisionCollectionX3D[0] =  "set_appliedParameters";          //[in,out] center           0 0 0    (-?,?)
$inCollisionCollectionX3D[1] =  "set_bounce";        //[in,out] info         []       [X3DChildNode]
$inCollisionCollectionX3D[2] =  "set_collidables";        //[in,out] joints         []       [X3DChildNode]
$inCollisionCollectionX3D[3] =  "set_enabled";        //[in,out] metadata         NULL     [X3DMetadataObject]
$inCollisionCollectionX3D[4] =  "set_frictionCoefficients";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$inCollisionCollectionX3D[5] =  "set_metadata";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$inCollisionCollectionX3D[6] =  "set_minBounceSpeed";           //[in,out] scale            1 1 1    (0,?)
$inCollisionCollectionX3D[7] =  "set_surfaceSpeed";//[in,out] scaleOrientation 0 0 1 0  [-1,1] or (-?,?)
$inCollisionCollectionX3D[8] =  "set_slipFactors";     //[in,out] joints         []       [X3DChildNode]
$inCollisionCollectionX3D[9] =  "set_softnessErrorCorrection";     //[in,out] joints         []       [X3DChildNode]
$inCollisionCollectionX3D[10] =  "set_softnessConstantForceMix";     //[in,out] joints         []       [X3DChildNode]

//-----------------------------------

//-----------------------------------
//Array of event names out for X3D CollisionCollection Field Types - table
//-----------------------------------
$outCollisionCollectionX3D[0] =  "appliedParameteres_changed";          //[in,out] center           0 0 0    (-?,?)
$outCollisionCollectionX3D[1] =  "bounce_changed";        //[in,out] info         []       [X3DChildNode]
$outCollisionCollectionX3D[2] =  "collidables_changed";        //[in,out] joints         []       [X3DChildNode]
$outCollisionCollectionX3D[3] =  "enabled_changed";        //[in,out] metadata         NULL     [X3DMetadataObject]
$outCollisionCollectionX3D[4] =  "frictionCoefficients_changed";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$outCollisionCollectionX3D[5] =  "metadata_changed";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$outCollisionCollectionX3D[6] =  "minBounceSpeed_changed";           //[in,out] scale            1 1 1    (0,?)
$outCollisionCollectionX3D[7] =  "surfaceSpeed_changed";//[in,out] scaleOrientation 0 0 1 0  [-1,1] or (-?,?)
$outCollisionCollectionX3D[8] =  "slipFactors_changed";     //[in,out] joints         []       [X3DChildNode]
$outCollisionCollectionX3D[9] =  "softnessErrorCorrection_changed";     //[in,out] joints         []       [X3DChildNode]
$outCollisionCollectionX3D[10] =  "softnessConstantForceMix_changed";     //[in,out] joints         []       [X3DChildNode]

//-----------------------------------

//-----------------------------------
//Array of event commands for X3D CollisionCollection  - table
//-----------------------------------

//-----------------------------------

//-----------------------------------
//Procedures for building menus for
//CollisionCollection Events
//-----------------------------------
//-------------------------------------------------------------------------
//Building the CollisionCollection eventOut submenu
global proc buildCollisionCollectionEOMenu(string $highlighted)
{
	global string $eoMenu;
	//nTranformX3D[] size = 11 (0-10); eventOut fields are 0-10;
	global string $ftCollisionCollectionX3D[];
	global string $outCollisionCollectionX3D[];
	global string $eoFieldTypeX3D;

	int $esi;
	for($esi = 0; $esi < 11; $esi++){
		menuItem -l $outCollisionCollectionX3D[$esi] -parent $eoMenu -c ("processMenuX3D " + $highlighted + " " + $outCollisionCollectionX3D[$esi] + " " + $ftCollisionCollectionX3D[$esi] + " 0");
	}
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Building the CollisionCollection eventIn submenu
global proc buildCollisionCollectionEIMenu(string $highlighted)
{
	global string $eiMenu;
	//nCollisionCollectionX3D[] size =11 (0-10); eventIn fields are 0-10;
	global string $ftCollisionCollectionX3D[];
	global string $inCollisionCollectionX3D[];
	global string $eoFieldTypeX3D;

		
	int $esi;
	for($esi=0;$esi<11;$esi++){
		if($eoFieldTypeX3D == $ftCollisionCollectionX3D[$esi])
		{
			menuItem -l $inCollisionCollectionX3D[$esi] -parent $eiMenu -c ("processMenuX3D " + $highlighted + " " + $inCollisionCollectionX3D[$esi] + " " + $ftCollisionCollectionX3D[$esi] + " 1");
		}
	}
	
	menuItem -divider true;
	menuItem -l "Reset" -parent $eiMenu -c "resetX3DRoutes";
}
//-------------------------------------------------------------------------

