//
// Copyright (C) 2004-2005 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_sound_tables.mel
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


//-------------------------------------------------------------------
//MEL string variables for setting X3D Routes
//-------------------------------------------------------------------
global string $eoMenu;
global string $eiMenu;
global string $eoFieldTypeX3D;
global string $ftSoundX3D[];
global string $inSoundX3D[];
global string $outSoundX3D[];

//---------------------------------
//Array of Field Types for X3D Sound - table
//---------------------------------
$ftSoundX3D[0] =  "SFVec3f";
$ftSoundX3D[1] =  "SFFloat";
$ftSoundX3D[2] =  "SFVec3f";
$ftSoundX3D[3] =  "SFFloat";
$ftSoundX3D[4] =  "SFFloat";
$ftSoundX3D[5] =  "SFNode";
$ftSoundX3D[6] =  "SFFloat";
$ftSoundX3D[7] =  "SFFloat";
$ftSoundX3D[8] =  "SFFloat";
$ftSoundX3D[9] =  "SFNode";

//-----------------------------------
//Array of event in names for X3D Sound Field Types - table
//-----------------------------------
$inSoundX3D[0] =  "set_direction";			//[in,out]
$inSoundX3D[1] =  "set_intensity";				//[in,out]
$inSoundX3D[2] =  "set_location";				//[in,out]
$inSoundX3D[3] =  "set_maxBack";	//[out]
$inSoundX3D[4] =  "set_maxFront";		//[out]
$inSoundX3D[5] =  "set_metadata";	//[out]
$inSoundX3D[6] =  "set_minBack";				//[out]
$inSoundX3D[7] =  "set_minFront";				//[out]
$inSoundX3D[8] =  "set_priority";			//[out]
$inSoundX3D[9] =  "set_source";			//[out]

//-----------------------------------

//-----------------------------------
//Array of event out names for X3D Sound Field Types - table
//-----------------------------------
$outSoundX3D[0] =  "direction_changed";	//[in,out]
$outSoundX3D[1] =  "intensity_changed";		//[in,out]
$outSoundX3D[2] =  "location_changed";	//[in,out]
$outSoundX3D[3] =  "maxBack_changed";	//[out]
$outSoundX3D[4] =  "maxFront_changed";	//[out]
$outSoundX3D[5] =  "metadata_changed";	//[out]
$outSoundX3D[6] =  "minBack_changed";			//[out]
$outSoundX3D[7] =  "minFront_changed";				//[out]
$outSoundX3D[8] =  "priority_changed";			//[out]
$outSoundX3D[9] =  "source_changed";			//[out]

//-----------------------------------

//-----------------------------------
//Array of event commands for X3D Sound  - table
//-----------------------------------

//-----------------------------------

//-----------------------------------
//Procedures for building menus for
//Sound Events
//-----------------------------------
//-------------------------------------------------------------------------
//Building the Sound eventOut submenu
global proc buildSoundEOMenu(string $highlighted)
{
	global string $eoMenu;
	global string $ftSoundX3D[];
	global string $outSoundX3D[];
	global string $eoFieldTypeX3D;

	int $esi;
	for($esi = 0; $esi < 10; $esi++){
		menuItem -l $outSoundX3D[$esi] -parent $eoMenu -c ("processMenuX3D " + $highlighted + " " + $outSoundX3D[$esi] + " " + $ftSoundX3D[$esi] + " 0");
	}
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Building the Sound eventIn submenu
global proc buildSoundEIMenu(string $highlighted)
{
	global string $eiMenu;
	global string $ftSoundX3D[];
	global string $inSoundX3D[];
	global string $eoFieldTypeX3D;

		
	int $esi;
	for($esi=0;$esi<10;$esi++){
		if($eoFieldTypeX3D == $ftSoundX3D[$esi])
		{
			menuItem -l $inSoundX3D[$esi] -parent $eiMenu -c ("processMenuX3D " + $highlighted + " " + $inSoundX3D[$esi] + " " + $ftSoundX3D[$esi] + " 1");
		}
	}
	
	menuItem -divider true;
	menuItem -l "Reset" -parent $eiMenu -c "resetX3DRoutes";
}
//-------------------------------------------------------------------------


