//
// Copyright (C) 2004-2005 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_hanimjoint_tables.mel
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


//-------------------------------------------------------------------
//MEL string variables for setting X3D Routes
//-------------------------------------------------------------------
global string $eoMenu;
global string $eiMenu;
global string $eoFieldTypeX3D;
global string $ftHAnimJointX3D[];
global string $inHAnimJointX3D[];
global string $outHAnimJointX3D[];
global string $ftX3DArray[];

//---------------------------------
//Array of Field Types for X3D HAnimJoint - table
//---------------------------------
$ftHAnimJointX3D[0] =  "MFNode";     //[in,out] joints         []       [X3DChildNode]
$ftHAnimJointX3D[1] =  "MFNode";     //[in,out] joints         []       [X3DChildNode]
$ftHAnimJointX3D[2] =  "SFVec3f";    //[in,out] center           0 0 0    (-?,?)
$ftHAnimJointX3D[3] =  "MFNode";     //[in,out] joints         []       [X3DChildNode]
$ftHAnimJointX3D[4] =  "MFNode";     //[in,out] joints         []       [X3DChildNode]
$ftHAnimJointX3D[5] =  "SFRotation"; //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$ftHAnimJointX3D[6] =  "MFFloat";     //[in,out] joints         []       [X3DChildNode]
$ftHAnimJointX3D[7] =  "SFNode";     //[in,out] joints         []       [X3DChildNode]
$ftHAnimJointX3D[8] =  "SFString";   //[in,out] info				[]       [X3DChildNode]
$ftHAnimJointX3D[9] =  "SFRotation"; //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$ftHAnimJointX3D[10] =  "SFVec3f";    //[in,out] translation      0 0 0    (-?,?)
$ftHAnimJointX3D[11] =  "SFRotation"; //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$ftHAnimJointX3D[12] =  "MFInt32";     //[in,out] joints         []       [X3DChildNode]
$ftHAnimJointX3D[13] =  "MFFloat";     //[in,out] joints         []       [X3DChildNode]
$ftHAnimJointX3D[14] =  "MFFloat";     //[in,out] joints         []       [X3DChildNode]
$ftHAnimJointX3D[15] =  "SFVec3f";    //[in,out] translation      0 0 0    (-?,?)
$ftHAnimJointX3D[16] =  "MFFloat";     //[in,out] joints         []       [X3DChildNode]

//-----------------------------------
//Array of event names in for X3D HAnimJoint Field Types - table
//-----------------------------------
$inHAnimJointX3D[0] =  "addChildren";          //[in,out] center           0 0 0    (-?,?)
$inHAnimJointX3D[1] =  "removeChildren";          //[in,out] center           0 0 0    (-?,?)
$inHAnimJointX3D[2] =  "set_center";          //[in,out] center           0 0 0    (-?,?)
$inHAnimJointX3D[3] =  "set_children";          //[in,out] center           0 0 0    (-?,?)
$inHAnimJointX3D[4] =  "set_displacers";          //[in,out] center           0 0 0    (-?,?)
$inHAnimJointX3D[5] =  "set_limitOrientation";        //[in,out] info         []       [X3DChildNode]
$inHAnimJointX3D[6] =  "set_llimit";        //[in,out] joints         []       [X3DChildNode]
$inHAnimJointX3D[7] =  "set_metadata";        //[in,out] metadata         NULL     [X3DMetadataObject]
$inHAnimJointX3D[8] =  "set_name";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$inHAnimJointX3D[9] =  "set_rotation";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$inHAnimJointX3D[10] =  "set_scale";           //[in,out] scale            1 1 1    (0,?)
$inHAnimJointX3D[11] =  "set_scaleOrientation";//[in,out] scaleOrientation 0 0 1 0  [-1,1] or (-?,?)
$inHAnimJointX3D[12] =  "set_skinCoordIndex";     //[in,out] joints         []       [X3DChildNode]
$inHAnimJointX3D[13] =  "set_skinCoordWeight";     //[in,out] joints         []       [X3DChildNode]
$inHAnimJointX3D[14] =  "set_stiffness";     //[in,out] joints         []       [X3DChildNode]
$inHAnimJointX3D[15] =  "set_translation";     //[in,out] translation      0 0 0    (-?,?)
$inHAnimJointX3D[16] =  "set_ulimit";     //[in,out] translation      0 0 0    (-?,?)

//-----------------------------------

//-----------------------------------
//Array of event names out for X3D HAnimJoint Field Types - table
//-----------------------------------
$outHAnimJointX3D[0] =  "addChildren";          //[in,out] center           0 0 0    (-?,?)
$outHAnimJointX3D[1] =  "removeChildren";          //[in,out] center           0 0 0    (-?,?)
$outHAnimJointX3D[2] =  "center_changed";          //[in,out] center           0 0 0    (-?,?)
$outHAnimJointX3D[3] =  "children_changed";          //[in,out] center           0 0 0    (-?,?)
$outHAnimJointX3D[4] =  "displacers_changed";        //[in,out] info         []       [X3DChildNode]
$outHAnimJointX3D[5] =  "limitOrientation_changed";        //[in,out] joints         []       [X3DChildNode]
$outHAnimJointX3D[6] =	"llimit_changed";
$outHAnimJointX3D[7] =  "metadata_changed";        //[in,out] metadata         NULL     [X3DMetadataObject]
$outHAnimJointX3D[8] =  "name_changed";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$outHAnimJointX3D[9] =  "rotation_changed";        //[in,out] rotation         0 0 1 0  [-1,1] or (-?,?)
$outHAnimJointX3D[10] =  "scale_changed";           //[in,out] scale            1 1 1    (0,?)
$outHAnimJointX3D[11] =  "scaleOrientation_changed";     //[in,out] joints         []       [X3DChildNode]
$outHAnimJointX3D[12] =  "skinCoordIndex_changed";     //[in,out] joints         []       [X3DChildNode]
$outHAnimJointX3D[13] =  "skinCoordWeight_changed";     //[in,out] joints         []       [X3DChildNode]
$outHAnimJointX3D[14] =  "stiffness_changed";     //[in,out] joints         []       [X3DChildNode]
$outHAnimJointX3D[15] =  "translation_changed";     //[in,out] translation      0 0 0    (-?,?)
$outHAnimJointX3D[16] =  "ulimit_changed";     //[in,out] translation      0 0 0    (-?,?)

//-----------------------------------

//-----------------------------------
//Array of event commands for X3D HAnimJoint  - table
//-----------------------------------

//-----------------------------------

//-----------------------------------
//Procedures for building menus for
//HAnimJoint Events
//-----------------------------------
//-------------------------------------------------------------------------
//Building the HAnimJoint eventOut submenu
global proc buildHAnimJointEOMenu(string $highlighted)
{
	global string $eoMenu;
	//nTranformX3D[] size = 17 (0-16); eventOut fields are 2-16;
	global string $ftHAnimJointX3D[];
	global string $outHAnimJointX3D[];
	global string $eoFieldTypeX3D;

	int $esi;
	for($esi = 2; $esi < 17; $esi++){
		menuItem -l $outHAnimJointX3D[$esi] -parent $eoMenu -c ("processMenuX3D " + $highlighted + " " + $outHAnimJointX3D[$esi] + " " + $ftHAnimJointX3D[$esi] + " 0");
	}
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Building the HAnimJoint eventIn submenu
global proc buildHAnimJointEIMenu(string $highlighted)
{
	global string $eiMenu;
	//nHAnimJointX3D[] size =17 (0-16); eventIn fields are 0-16;
	global string $ftHAnimJointX3D[];
	global string $inHAnimJointX3D[];
	global string $eoFieldTypeX3D;

		
	int $esi;
	for($esi=0;$esi<17;$esi++){
		if($eoFieldTypeX3D == $ftHAnimJointX3D[$esi])
		{
			menuItem -l $inHAnimJointX3D[$esi] -parent $eiMenu -c ("processMenuX3D " + $highlighted + " " + $inHAnimJointX3D[$esi] + " " + $ftHAnimJointX3D[$esi] + " 1");
		}
	}
	
	menuItem -divider true;
	menuItem -l "Reset" -parent $eiMenu -c "resetX3DRoutes";
}
//-------------------------------------------------------------------------

