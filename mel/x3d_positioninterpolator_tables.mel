//
// Copyright (C) 2004 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_positioninterpolator_tables.mel
//
// 
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


//-------------------------------------------------------------------
//MEL string variables for setting X3D Routes
//-------------------------------------------------------------------
global string $eoMenu;
global string $eiMenu;
global string $eoFieldTypeX3D;
global string $ftPositionInterpolatorX3D[];
global string $inPositionInterpolatorX3D[];
global string $outPositionInterpolatorX3D[];

//---------------------------------
//Array of Field Types for X3D PositionInterpolator - table
//---------------------------------
$ftPositionInterpolatorX3D[0] =  "SFFloat";
$ftPositionInterpolatorX3D[1] =  "MFFloat";
$ftPositionInterpolatorX3D[2] =  "MFVec3f";
$ftPositionInterpolatorX3D[3] =  "SFNode";
$ftPositionInterpolatorX3D[4] =  "SFVec3f";

//-----------------------------------
//Array of event in names for X3D PositionInterpolator Field Types - table
//-----------------------------------
$inPositionInterpolatorX3D[0] =  "set_fraction";		//[in]
$inPositionInterpolatorX3D[1] =  "set_key";				//[in,out]
$inPositionInterpolatorX3D[2] =  "set_keyValue";			//[in,out]
$inPositionInterpolatorX3D[3] =  "set_metadata";			//[in,out]
$inPositionInterpolatorX3D[4] =  "value_changed";	//[out]

//-----------------------------------

//-----------------------------------
//Array of event out names for X3D PositionInterpolator Field Types - table
//-----------------------------------
$outPositionInterpolatorX3D[0] =  "set_fraction";		//[in]
$outPositionInterpolatorX3D[1] =  "key_changed";		//[in,out]
$outPositionInterpolatorX3D[2] =  "keyValue_changed";	//[in,out]
$outPositionInterpolatorX3D[3] =  "metadata_changed";	//[in,out]
$outPositionInterpolatorX3D[4] =  "value_changed";		//[out]

//-----------------------------------

//-----------------------------------
//Array of event commands for X3D PositionInterpolator  - table
//-----------------------------------

//-----------------------------------

//-----------------------------------
//Procedures for building menus for
//PositionInterpolator Events
//-----------------------------------
//-------------------------------------------------------------------------
//Building the PositionInterpolator eventOut submenu
global proc buildPositionInterpolatorEOMenu(string $highlighted)
{
	global string $eoMenu;
	//nPositionInterpolatorX3D[] size = 5 (0-4); eventOut fields are 1-4;
	global string $ftPositionInterpolatorX3D[];
	global string $outPositionInterpolatorX3D[];
	global string $eoFieldTypeX3D;

	int $esi;
	for($esi = 1; $esi < 5; $esi++){
		menuItem -l $outPositionInterpolatorX3D[$esi] -parent $eoMenu -c ("processMenuX3D " + $highlighted + " " + $outPositionInterpolatorX3D[$esi] + " " + $ftPositionInterpolatorX3D[$esi] + " 0");
	}
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Building the PositionInterpolator eventIn submenu
global proc buildPositionInterpolatorEIMenu(string $highlighted)
{
	global string $eiMenu;
	//nPositionInterpolatorX3D[] size = 5 (0-4); eventIn fields are 0-3;
	global string $ftPositionInterpolatorX3D[];
	global string $inPositionInterpolatorX3D[];
	global string $eoFieldTypeX3D;

		
	int $esi;
	for($esi=0;$esi<4;$esi++){
		if($eoFieldTypeX3D == $ftPositionInterpolatorX3D[$esi])
		{
			menuItem -l $inPositionInterpolatorX3D[$esi] -parent $eiMenu -c ("processMenuX3D " + $highlighted + " " + $inPositionInterpolatorX3D[$esi] + " " + $ftPositionInterpolatorX3D[$esi] + " 1");
		}
	}
	
	menuItem -divider true;
	menuItem -l "Reset" -parent $eiMenu -c "resetX3DRoutes";
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
// Procedure for collecting position SFVec3f Key Values
//-------------------------------------------------------------------------
global proc collectPosSFVec3f(string $nodeName)
{
	float $curTimePos = `currentTime -q`;
	float $keyEvery = `getAttr ($nodeName+".keso")`;
	float $startFrame = `getAttr($nodeName+".startFrame")`;
	float $stopFrame = `getAttr($nodeName+".stopFrame")`;
	float $iTime = $stopFrame - $startFrame;
	int $keyLength = $iTime/$keyEvery;
	int $i;
	string $kvString="";
	
	currentTime -e $startFrame;
	if($keyLength > 0)
	{
		for($i=0;$i<$keyLength;$i++)
		{
			float $cKeyValue = $startFrame +($i * $keyEvery);
			currentTime -e $cKeyValue;
			if($cKeyValue >= $stopFrame){
				if($keyLength > 1)
				{

				}
				else
				{
					float $xv = `getAttr ($nodeName+".positionX")`;
					float $yv = `getAttr ($nodeName+".positionY")`;
					float $zv = `getAttr ($nodeName+".positionZ")`;
					$kvString = ($xv +" "+$yv+" "+$zv+", ");
				}
			}
			else
			{
				float $xv = `getAttr ($nodeName+".positionX")`;
				float $yv = `getAttr ($nodeName+".positionY")`;
				float $zv = `getAttr ($nodeName+".positionZ")`;
				$kvString = $kvString + ($xv +" "+$yv+" "+$zv+", ");
			}
		}
	}
	else
	{
		float $xv = `getAttr ($nodeName+".positionX")`;
		float $yv = `getAttr ($nodeName+".positionY")`;
		float $zv = `getAttr ($nodeName+".positionZ")`;
		$kvString = ($xv +" "+$yv+" "+$zv+", ");
	}
	
	currentTime -e $stopFrame;
	float $xv = `getAttr ($nodeName+".positionX")`;
	float $yv = `getAttr ($nodeName+".positionY")`;
	float $zv = `getAttr ($nodeName+".positionZ")`;
	$kvString = $kvString+($xv +" "+$yv+" "+$zv);
	
	setAttr ($nodeName+".keyValue") -type "string" $kvString;
	
	currentTime -e $curTimePos;
	
}
//------------------------------------------------------------------