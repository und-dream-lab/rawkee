//
// Copyright (C) 2004 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_movietexture_tables.mel
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


//-------------------------------------------------------------------
//MEL string variables for setting X3D Routes
//-------------------------------------------------------------------
global string $eoMenu;
global string $eiMenu;
global string $eoFieldTypeX3D;
global string $ftMovieTextureX3D[];
global string $inMovieTextureX3D[];
global string $outMovieTextureX3D[];

//---------------------------------
//Array of Field Types for X3D MovieTexture - table
//---------------------------------

$ftMovieTextureX3D[0] =  "SFBool";//   [in,out] loop             FALSE
$ftMovieTextureX3D[1] =  "SFNode";//   [in,out] metadata         NULL  [X3DMetadataObject]
$ftMovieTextureX3D[2] =  "SFTime";//   [in,out] resumeTime       0     (-?,?)
$ftMovieTextureX3D[3] =  "SFTime";//   [in,out] pauseTime        0     (-?,?)
$ftMovieTextureX3D[4] =  "SFFloat";//  [in,out] speed            1.0   (-?,?)
$ftMovieTextureX3D[5] =  "SFTime";//   [in,out] startTime        0     (-?,?)
$ftMovieTextureX3D[6] =  "SFTime";//   [in,out] stopTime         0     (-?,?)
$ftMovieTextureX3D[7] =  "MFString";// [in,out] url              []    [urn]
$ftMovieTextureX3D[8] =  "SFTime";//   [out]    duration_changed
$ftMovieTextureX3D[9] =  "SFTime";//   [out]    elapsedTime
$ftMovieTextureX3D[10] =  "SFBool";//   [out]    isActive
$ftMovieTextureX3D[11] =  "SFBool";//   [out]    isPaused
  
//-----------------------------------
//Array of event in names for X3D MovieTexture Field Types - table
//-----------------------------------

$inMovieTextureX3D[0] =  "set_loop";
$inMovieTextureX3D[1] =  "set_metadata";
$inMovieTextureX3D[2] =  "set_resumeTime";
$inMovieTextureX3D[3] =  "set_pauseTime";
$inMovieTextureX3D[4] =  "set_speed";
$inMovieTextureX3D[5] =  "set_startTime";
$inMovieTextureX3D[6] =  "set_stopTime";
$inMovieTextureX3D[7] =  "set_url";
$inMovieTextureX3D[8] =  "duration_changed";
$inMovieTextureX3D[9] =  "elapsedTime";
$inMovieTextureX3D[10] =  "isActive";
$inMovieTextureX3D[11] =  "isPaused";


//-----------------------------------

//-----------------------------------
//Array of event out names for X3D MovieTexture Field Types - table
//-----------------------------------

$outMovieTextureX3D[0] =  "loop_changed";
$outMovieTextureX3D[1] =  "metadata_changed";
$outMovieTextureX3D[2] =  "resumeTime_changed";
$outMovieTextureX3D[3] =  "pauseTime_changed";
$outMovieTextureX3D[4] =  "speed_changed";
$outMovieTextureX3D[5] =  "startTime_changed";
$outMovieTextureX3D[6] =  "stopTime_changed";
$outMovieTextureX3D[7] =  "url_changed";
$outMovieTextureX3D[8] =  "duration_changed";
$outMovieTextureX3D[9] =  "elapsedTime";
$outMovieTextureX3D[10] =  "isActive";
$outMovieTextureX3D[11] =  "isPaused";


//-----------------------------------

//-----------------------------------
//Array of event commands for X3D MovieTexture  - table
//-----------------------------------

//-----------------------------------

//-----------------------------------
//Procedures for building menus for
//MovieTexture Events
//-----------------------------------
//-------------------------------------------------------------------------
//Building the MovieTexture eventOut submenu
global proc buildMovieTextureEOMenu(string $highlighted)
{
	global string $eoMenu;
	//nMovieTextureX3D[] size = 12 (0-11); eventOut fields are 0-11;
	global string $ftMovieTextureX3D[];
	global string $outMovieTextureX3D[];
	global string $eoFieldTypeX3D;

	int $esi;
	for($esi = 0; $esi < 12; $esi++){
		menuItem -l $outMovieTextureX3D[$esi] -parent $eoMenu -c ("processMenuX3D " + $highlighted + " " + $outMovieTextureX3D[$esi] + " " + $ftMovieTextureX3D[$esi] + " 0");
	}
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Building the MovieTexture eventIn submenu
global proc buildMovieTextureEIMenu(string $highlighted)
{
	global string $eiMenu;
	//nMovieTextureX3D[] size = 12 (0-11); eventIn fields are 0-7;
	global string $ftMovieTextureX3D[];
	global string $inMovieTextureX3D[];
	global string $eoFieldTypeX3D;

		
	int $esi;
	for($esi=0;$esi<8;$esi++){
		if($eoFieldTypeX3D == $ftMovieTextureX3D[$esi])
		{
			menuItem -l $inMovieTextureX3D[$esi] -parent $eiMenu -c ("processMenuX3D " + $highlighted + " " + $inMovieTextureX3D[$esi] + " " + $ftMovieTextureX3D[$esi] + " 1");
		}
	}
	
	menuItem -divider true;
	menuItem -l "Reset" -parent $eiMenu -c "resetX3DRoutes";
}
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//X3D Movie Node Field Addition procedure
global proc addX3DMovieField(string $newAtt, string $aNode)
{
	switch($newAtt)
	{
		case "loop":
			addAttr -ln "loop" -at bool -defaultValue 0 $aNode;
			addAttr -ln "loop2" -at bool -hidden true -defaultValue 0 $aNode;
			connectAttr ($aNode+".loop") ($aNode+".loop2");
			break;
			
		case "resumeTime":
			addAttr -ln "resumeTime" -at "float" -defaultValue 0 $aNode;
			addAttr -ln "resumeTime2" -at "float" -hidden true -defaultValue 0 $aNode;
			connectAttr ($aNode+".resumeTime") ($aNode+".resumeTime2");
			break;
			
		case "pauseTime":
			addAttr -ln "pauseTime" -at "float" -defaultValue 0 $aNode;
			addAttr -ln "pauseTime2" -at "float" -hidden true -defaultValue 0 $aNode;
			connectAttr ($aNode+".pauseTime") ($aNode+".pauseTime2");
			break;
			
		case "speed":
			addAttr -ln "speed" -at "float" -defaultValue 1 $aNode;
			addAttr -ln "speed2" -at "float" -hidden true -defaultValue 1 $aNode;
			connectAttr ($aNode+".speed") ($aNode+".speed2");
			break;
			
		case "startTime":
			addAttr -ln "startTime" -at "float" -defaultValue 0 $aNode;
			addAttr -ln "startTime2" -at "float" -hidden true -defaultValue 0 $aNode;
			connectAttr ($aNode+".startTime") ($aNode+".startTime2");
			break;
			
		case "stopTime":
			addAttr -ln "stopTime" -at "float" -defaultValue 0 $aNode;
			addAttr -ln "stopTime2" -at "float" -hidden true -defaultValue 0 $aNode;
			connectAttr ($aNode+".stopTime") ($aNode+".stopTime2");
			break;
			
		default:
			break;
	}
	
}

