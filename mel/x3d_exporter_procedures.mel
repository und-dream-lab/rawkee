//
// Copyright (C) 2004-2005 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d_exporter_procedures.mel
//
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//

global string $ftX3DArray[];

global proc string[] x3dTextures2DNonFileNames()
{
	string $x3dNames[] = `ls -sn -et "bulge" -et "checker" -et "cloth" -et "fluidTexture2D" -et "fractal" -et "grid" -et "mountain" -et "noise" -et "ocean" -et "ramp" -et "water"`;
	return $x3dNames;
}

global proc string getFormatString(string $nodeName)
{
	
	string $format = "gif";
	int $cVal = `getAttr ($nodeName+".fChoice")`;
	switch($cVal)
	{
		case 1:
			$format = "gif";
			break;
		case 3:
			$format = "png";
			break;
		default:
			$format = "jpg";
			break;
	}
	return $format;
}

//global proc processNonFileTextures(string $localPath)
//global proc string processNonFileTextures()
global proc processNonFileTextures()
{
	string $x3dNames[] = x3dTextures2DNonFileNames(); //no movie textures
	int $nSize = size($x3dNames);
	int $i;
	for($i=0;$i<$nSize;$i++)
	{	
		int $x3dHeight = `getAttr ($x3dNames[$i]+".imgdimh")`;
		int $x3dWidth = `getAttr ($x3dNames[$i]+".imgdimw")`;
		
		string $format = getFormatString($x3dNames[$i]);
		
		string $localPath = `internalVar -utd`;
//		string $fileName = $localPath + "internalTextures/" + $x3dNames[$i] + "_rawkee_export." +$format;;
		string $fileName = $localPath + $x3dNames[$i] + "_rawkee_export." +$format;
		convertSolidTx -name ($x3dNames[$i]+"_rawkee_export") -sp true -antiAlias 0 -f true -fts true -sh 0 -fin $fileName -alpha true -resolutionX $x3dWidth -resolutionY $x3dHeight -fileFormat $format $x3dNames[$i];
		setX3DTextureAttributes($x3dNames[$i]);
	}
}

global proc setX3DTextureAttributes(string $nodeName)
{
	string $to = $nodeName+"_rawkee_export";
	copyX3DIntAttribute($nodeName, $to, "tOption");
	copyX3DIntAttribute($nodeName, $to, "fChoice");
	copyX3DIntAttribute($nodeName, $to, "pLength");
	copyX3DIntAttribute($nodeName, $to, "stMode");
	copyX3DIntAttribute($nodeName, $to, "adjsize");
	copyX3DIntAttribute($nodeName, $to, "imgdimw");
	copyX3DIntAttribute($nodeName, $to, "imgdimh");
	
}

global proc copyX3DIntAttribute(string $fn, string $tn, string $attName)
{
	int $val = `getAttr ($fn+"."+$attName)`;
	setAttr ($tn+"."+$attName) $val;
}

global proc delete_rawkee_export_files()
{
	string $x3dNames[] = `ls -tex`;
	int $j = size($x3dNames);
	int $i;
	for($i=0;$i<$j;$i++)
	{
		string $nChop[];
		tokenize($x3dNames[$i], "_", $nChop);
		int $k = size($nChop);
		if($k > 2)
		{
			if($nChop[$k-2] == "rawkee" && $nChop[$k-1] == "export") delete $x3dNames[$i];
		}
	}
}

global proc clearAllRawKeeKVs()
{
	string $interpNodes[] = `ls -type x3dPositionInterpolator -type x3dOrientationInterpolator -type x3dScalarInterpolator -type x3dBooleanSequencer -type x3dColorInterpolator -type x3dCoordinateInterpolator -type x3dIntegerSequencer -type x3dNormalInterpolator`;
	int $interSize = size($interpNodes);
	int $i;
	for($i=0;$i<$interSize;$i++)
	{
		setAttr ($interpNodes[$i]+".keyValue") -type "string" "";
	}
}

global proc string getcontainerFieldValue(int $multiNode)
{
	string $cField;
	switch($multiNode)
	{
		case 1:
			$cField = "appearance";
			break;
		case 2:
			$cField = "backTexture";
			break;
		case 3:
			$cField = "bottomTexture";
			break;
		case 4:
			$cField = "children";
			break;
		case 5:
			$cField = "color";
			break;
		case 6:
			$cField = "controlPoint";
			break;
		case 7:
			$cField = "controlPoints";
			break;
		case 8:
			$cField = "coord";
			break;
		case 9:
			$cField = "crossSectionCurve";
			break;
		case 10:
			$cField = "data";
			break;
		case 11:
			$cField = "displacers";
			break;
		case 12:
			$cField = "fillProperties";
			break;
		case 13:
			$cField = "fontStyle";
			break;
		case 14:
			$cField = "frontTexture";
			break;
		case 15:
			$cField = "geometry";
			break;
		case 16:
			$cField = "geoOrigin";
			break;
		case 17:
			$cField = "joints";
			break;
		case 18:
			$cField = "leftTexture";
			break;
		case 19:
			$cField = "lineProperties";
			break;
		case 20:
			$cField = "material";
			break;
		case 21:
			$cField = "metadata";
			break;
		case 22:
			$cField = "normal";
			break;
		case 23:
			$cField = "profileCurve";
			break;
		case 24:
			$cField = "proxy";
			break;
		case 25:
			$cField = "rightTexture";
			break;
		case 26:
			$cField = "rootNode";
			break;
		case 27:
			$cField = "segments";
			break;
		case 28:
			$cField = "sites";
			break;
		case 29:
			$cField = "skeleton";
			break;
		case 30:
			$cField = "skin";
			break;
		case 31:
			$cField = "skinCoord";
			break;
		case 32:
			$cField = "skinNormal";
			break;
		case 33:
			$cField = "source";
			break;
		case 34:
			$cField = "texCoord";
			break;
		case 35:
			$cField = "texture";
			break;
		case 36:
			$cField = "textureTransform";
			break;
		case 37:
			$cField = "topTexture";
			break;
		case 38:
			$cField = "trajectoryCurve";
			break;
		case 39:
			$cField = "trimmingContour";
			break;
		case 40:
			$cField = "value";
			break;
		case 41:
			$cField = "viewpoints";
			break;
		case 42:
			$cField = "watchList";
			break;
		default:
			break;
	}
	return $cField;
}

global proc string[] getUserAccessTypes(string $aName)
{
	string $aTypes[];
	int $fLengths = `getAttr ($aName+".fl")`;
	int $i;
	
	for($i=0;$i<$fLengths;$i++)
	{
		int $nTypes = `getAttr ($aName+".et"+$i)`;
		switch($nTypes)
		{
			case 1:
				$aTypes[$i] = "inputOnly";
				break;
			case 2:
				$aTypes[$i] = "outputOnly";
				break;
			case 3:
				$aTypes[$i] = "inputOutput";
				break;
			case 4:
				$aTypes[$i] = "initializeOnly";
				break;
			default:
				$aTypes[$i] = "initializeOnly";
				break;
		}
	}
	
	return $aTypes;
}

global proc string[] getUserFieldTypes(string $aName)
{
	global string $ftX3DArray[];
	
	string $fTypes[];
	
	int $fLengths = `getAttr ($aName+".fl")`;
	int $i;
	
	for($i=0;$i<$fLengths;$i++)
	{
		int $nTypes = `getAttr ($aName+".ft"+$i)`;
		$fTypes[$i] = $ftX3DArray[$nTypes-1];
	}
	
	return $fTypes;
}

global proc string[] getUserFieldNames(string $aName)
{
	string $fNames[];
	int $fLengths = `getAttr ($aName+".fl")`;
	int $i;
	
	for($i=0;$i<$fLengths;$i++)
	{
		$fNames[$i] = `getAttr ($aName+".en"+$i)`;
	}
	
	return $fNames;
}

global proc string[] getUserFieldValues(string $aName)
{
	string $fValues[];
	int $fLengths = `getAttr ($aName+".fl")`;
	int $i;
	
	for($i=0;$i<$fLengths;$i++)
	{
		$fValues[$i] = `getAttr ($aName+".ev"+$i)`;
	}
	
	return $fValues;
}

global proc int checkForTagFields(string $aName)
{
	int $hasUserTags = 0;
	int $fLength = `getAttr ($aName+".fieldLength")`;
	if($fLength >0) $hasUserTags = 1;
	return $hasUserTags;
}

global proc int checkForLocalUrl(string $aName)
{
	int $hasLocalUrls = 0;
	int $uLength = `getAttr ($aName+".urlLength")`;
	int $i;
	
	for($i=0;$i<$uLength;$i++)
	{
		int $uType = `getAttr($aName+".ut"+$i)`;
		if($uType) $hasLocalUrls = $uType;
	}
	
	return $hasLocalUrls;
}


global proc int makeUNodesExportReady()
{
	string $cNode[] = `ls -et "x3dCoordinate"`;
	int $mSize = size($cNode);
	int $i;
	for($i=0;$i<$mSize;$i++)
	{
//		print("Preparing " + $cNode[$i] + "\n");
		string $imParent[] = `listRelatives -p $cNode[$i]`;
		string $aMesh[] = `listRelatives -p $imParent[0]`;
		string $cValue = checkTheCoordinates($aMesh[0]);
		setAttr -type "string" ($cNode[$i]+".point") $cValue;
	}
	
	string $coNode[] = `ls -et "x3dColor"`;
	$mSize = size($coNode);
	for($i=0;$i<$mSize;$i++)
	{
//		print("Preparing " + $coNode[$i]+"\n");
		string $imParent[] = `listRelatives -p $coNode[$i]`;
		string $aMesh[] = `listRelatives -p $imParent[0]`;
		string $coValue = checkTheColors($aMesh[0],0);
		setAttr -type "string" ($coNode[$i]+".color") $coValue;
	}
	
	string $corNode[] = `ls -et "x3dColorRGBA"`;
	$mSize = size($corNode);
	for($i=0;$i<$mSize;$i++)
	{
//		print("Preparing " + $corNode[$i]+"\n");
		string $imParent[] = `listRelatives -p $corNode[$i]`;
		string $aMesh[] = `listRelatives -p $imParent[0]`;
		string $corValue = checkTheColors($aMesh[0],1);
		setAttr -type "string" ($corNode[$i]+".color") $corValue;
	}
	
	string $nNode[] = `ls -et "x3dNormal"`;
	$mSize = size($nNode);
	for($i=0;$i<$mSize;$i++)
	{
//		print("Preparing " + $nNode[$i]+"\n");
		string $imParent[] = `listRelatives -p $nNode[$i]`;
		string $aMesh[] = `listRelatives -p $imParent[0]`;
		string $nValue = checkTheNormals($aMesh[0]);
		setAttr -type "string" ($nNode[$i]+".vector") $nValue;
	}
	
	string $tcNode[] = `ls -et "x3dTextureCoordinate"`;
	$mSize = size($tcNode);
	for($i=0;$i<$mSize;$i++)
	{
//		print("Preparing " + $tcNode[$i]+"\n");
		string $imParent[] = `listRelatives -p $tcNode[$i]`;
		string $aMesh[] = `listRelatives -p $imParent[0]`;
		string $tcValue = checkTheUVCoordinates($aMesh[0]);
		setAttr -type "string" ($tcNode[$i]+".point") $tcValue;
	}
	
	string $ifsNode[] = `ls -et "x3dIndexedFaceSet"`;
	$mSize = size($ifsNode);
	for($i=0;$i<$mSize;$i++)
	{
//		print("Preparing " + $ifsNode[$i]+"\n");
		string $aMesh[] = `listRelatives -p $ifsNode[$i]`;
		string $indexString1 = checkTheCoordIndex($aMesh[0]);
		setAttr ($ifsNode[$i]+".coordIndex") -type "string" $indexString1;
		string $indexString2 = checkTheColorIndex($aMesh[0]);
		setAttr ($ifsNode[$i]+".colorIndex") -type "string" $indexString2;
		string $indexString3 = checkTheNormalIndex($aMesh[0]);
		setAttr ($ifsNode[$i]+".normalIndex") -type "string" $indexString3;
		string $indexString4 = checkTheTexCoordIndex($aMesh[0]);
		setAttr ($ifsNode[$i]+".texCoordIndex") -type "string" $indexString4;
	}
	
	return 1;
}

global proc string getUnderworldRelatives(string $nodeName)
{
	string $geometryName[] = `listRelatives -c $nodeName`;
	string $retName = "";
	int $grSize = size($geometryName);
	int $i;

	for($i=0;$i<$grSize;$i++)
	{
		string $nodeType = `nodeType $geometryName[$i]`;
		switch($nodeType)
		{
			case "x3dIndexedFaceSet":
				$retName = $geometryName[$i];
				break;
				
			case "x3dBox":
				$retName = $geometryName[$i];
				break;
				
			case "x3dCylinder":
				$retName = $geometryName[$i];
				break;

			case "x3dSphere":
				$retName = $geometryName[$i];
				break;
				
			case "x3dCone":
				$retName = $geometryName[$i];
				break;

			default:
				break;				
		}
	}
	
	return $retName;
}

global proc string[] getRoutes()
{
	string $routeList[] = `ls -et "x3dRoute"`;
	return $routeList;
}

global proc string[] getRouteVars(string $nodeName)
{
	string $routeParts[];
	$routeParts[0] = `getAttr ($nodeName+".fromNode")`;
	$routeParts[1] = `getAttr ($nodeName+".webOutput")`;
	$routeParts[2] = `getAttr ($nodeName+".toNode")`;
	$routeParts[3] = `getAttr ($nodeName+".webInput")`;
	return $routeParts;
}

global proc convertToX3DB(string $fileLoc)
{
	string $chopFile[];
	string $method = "-fastest";
	int $mi = `optionVar -q x3dBCFlag`;
	
	switch($mi)
	{
		case 0:
			$method = "-fastest";
			break;
		case 1:
			$method = "-smallest";
			break;
		case 2:
			$method = "-lossy";
			break;
		default:
			$method = "-smallest";
			break;
	}
	tokenize($fileLoc, ".", $chopFile);
	int $i;
	int $len = size($chopFile);
	if($len > 2)
	{
		if($chopFile[$len-2] == "x3db") $len = $len-1;
	}
	string $newLoc="";
	for($i=0;$i<$len;$i++)
	{
		if($i==$len-1)
		{
			if($chopFile[$i] == "x3d" || $chopFile[$i] == "x3db") $newLoc = $newLoc+"x3db";
			else
			{
				$newLoc = $newLoc + $chopFile[$i] + ".x3db";
			}
		}
		else $newLoc = $newLoc + $chopFile[$i] + ".";
	}
	string $aval;
	int $javaMem = `optionVar -q "x3dJavaMemory"`;
	string $jmString = "-Xmx"+$javaMem+"M";
	
	if(`about -win`)
	{
		string $wc = "java "+$jmString+" -classpath .;";
		$wc = $wc+"\"c:/Program Files/RawKee/java/jars/FastInfoset.jar;";
		$wc = $wc+"c:/Program Files/RawKee/java/jars/xj3d-jaxp.jar;";
		$wc = $wc+"c:/Program Files/RawKee/java/jars/xj3d-render.jar;";
		$wc = $wc+"c:/Program Files/RawKee/java/jars/xj3d-norender.jar;";
		$wc = $wc+"c:/Program Files/RawKee/java/jars/j3d-org.jar;";
		$wc = $wc+"c:/Program Files/RawKee/java/jars/xj3d-parser.jar;";
		$wc = $wc+"c:/Program Files/RawKee/java\" ";
	
		string $com = "X3DSerializer "+$method+" \""+$fileLoc+"\" \""+$newLoc+"\"";
		$aval = system($wc+$com);
		print($wc+$com);
	}
	else if(`about -mac`)
	{
		string $wc = "java "+$jmString+" -classpath .:";
		$wc = $wc+"/Applications/RawKee/java/jars/FastInfoset.jar:";
		$wc = $wc+"/Applications/RawKee/java/jars/xj3d-jaxp.jar:";
		$wc = $wc+"/Applications/RawKee/java/jars/xj3d-render.jar:";
		$wc = $wc+"/Applications/RawKee/java/jars/xj3d-norender.jar:";
		$wc = $wc+"/Applications/RawKee/java/jars/j3d-org.jar:";
		$wc = $wc+"/Applications/RawKee/java/jars/xj3d-parser.jar:";
		$wc = $wc+"/Applications/RawKee/java ";
	
		string $com = "X3DSerializer "+$method+" \""+$fileLoc+"\" \""+$newLoc+"\"";
		$aval = system($wc+$com);
	}
	else if(`about -li`)
	{
		string $wc = "java "+$jmString+" -classpath .:";
		$wc = $wc+"/usr/local/RawKee/java/jars/FastInfoset.jar:";
		$wc = $wc+"/usr/local/RawKee/java/jars/xj3d-jaxp.jar:";
		$wc = $wc+"/usr/local/RawKee/java/jars/xj3d-render.jar:";
		$wc = $wc+"/usr/local/RawKee/java/jars/xj3d-norender.jar:";
		$wc = $wc+"/usr/local/RawKee/java/jars/j3d-org.jar:";
		$wc = $wc+"/usr/local/RawKee/java/jars/xj3d-parser.jar:";
		$wc = $wc+"/usr/local/RawKee/java ";
	
		string $com = "X3DSerializer "+$method+" \""+$fileLoc+"\" \""+$newLoc+"\"";
		$aval = system($wc+$com);
	}
	else if(`about -ir`)
	{
		string $wc = "java "+$jmString+" -classpath .:";
		$wc = $wc+"/usr/local/RawKee/java/jars/FastInfoset.jar:";
		$wc = $wc+"/usr/local/RawKee/java/jars/xj3d-jaxp.jar:";
		$wc = $wc+"/usr/local/RawKee/java/jars/xj3d-render.jar:";
		$wc = $wc+"/usr/local/RawKee/java/jars/xj3d-norender.jar:";
		$wc = $wc+"/usr/local/RawKee/java/jars/j3d-org.jar:";
		$wc = $wc+"/usr/local/RawKee/java/jars/xj3d-parser.jar:";
		$wc = $wc+"/usr/local/RawKee/java ";
	
		string $com = "X3DSerializer "+$method+" \""+$fileLoc+"\" \""+$newLoc+"\"";
		$aval = system($wc+$com);
	}
	else
	{
		$aval = "\n";
		$aval = $aval + "Operating System not detected.\nX3D to X3DB conversion did not process.\n";
	}
	//print($aval);
}