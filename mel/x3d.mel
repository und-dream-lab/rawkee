//--------------------------------------------------------------
// procedure for suppressing default MPxTransform attributes in
// the attribute editor
//--------------------------------------------------------------
global proc x3dMPxTransformSuppression()
{
	editorTemplate -suppress "translate"; editorTemplate -suppress "rotate"; editorTemplate -suppress "rotateOrder"; editorTemplate -suppress "scale"; editorTemplate -suppress "shear"; editorTemplate -suppress "rotatePivot";
	editorTemplate -suppress "rotatePivotTranslate";editorTemplate -suppress "scalePivot"; editorTemplate -suppress "scalePivotTranslate"; editorTemplate -suppress "rotateAxis";editorTemplate -suppress "minTransLimit";
	editorTemplate -suppress "maxTransLimit"; editorTemplate -suppress "minRotLimit"; editorTemplate -suppress "maxRotLimit"; editorTemplate -suppress "minScaleLimit";	editorTemplate -suppress "maxScaleLimit";
	editorTemplate -suppress "geometry"; editorTemplate -suppress "selectHandle"; editorTemplate -suppress "rotateQuaternion"; editorTemplate -suppress "showManipDefault";	editorTemplate -suppress "dynamics";
	editorTemplate -suppress "displayRotatePivot"; editorTemplate -suppress "displayHandle"; editorTemplate -suppress "inheritsTransform"; editorTemplate -suppress "displayScalePivot"; editorTemplate -suppress "displayLocalAxis";
	editorTemplate -suppress "maxScaleLimitEnable"; editorTemplate -suppress "minScaleLimitEnable"; editorTemplate -suppress "maxRotLimitEnable"; editorTemplate -suppress "minRotLimitEnable";	editorTemplate -suppress "maxTransLimitEnable";
	editorTemplate -suppress "minTransLimitEnable";	editorTemplate -suppress "mentalRayControls";
}

//--------------------------------------------------------------
// procedure for suppressing default maya attributes in the
// attribute editor
//--------------------------------------------------------------
global proc x3dOptionSuppression()
{
	editorTemplate -suppress "input"; editorTemplate -suppress "caching"; editorTemplate -suppress "nodeState"; editorTemplate -suppress "localPosition"; editorTemplate -suppress "compInstObjGroups";
	editorTemplate -suppress "instObjGroups"; editorTemplate -suppress "xWidth"; editorTemplate -suppress "zWidth"; editorTemplate -suppress "dispType"; editorTemplate -suppress "antialiasingLevel";
	editorTemplate -suppress "shadingSamples"; editorTemplate -suppress "maxShadingSamples"; editorTemplate -suppress "maxVisibilitySamplesOverride"; editorTemplate -suppress "maxVisibilitySamples";
	editorTemplate -suppress "volumeSamples"; editorTemplate -suppress "opposite"; editorTemplate -suppress "castsShadows"; editorTemplate -suppress "receiveShadows"; editorTemplate -suppress "motionBlur";
	editorTemplate -suppress "primaryVisibility"; editorTemplate -suppress "visibleInReflections"; editorTemplate -suppress "visibleInRefractions"; editorTemplate -suppress "doubleSided"; editorTemplate -suppress "opposite";
	editorTemplate -suppress "geometryAntialiasingOverride"; editorTemplate -suppress "antialiasingLevel"; editorTemplate -suppress "shadingSamplesOverride"; editorTemplate -suppress "volumeSamplesOverride";
	editorTemplate -suppress "depthJitter"; editorTemplate -suppress "boundingBoxScale"; editorTemplate -suppress "featureDisplacement"; editorTemplate -suppress "initialSampleRate"; editorTemplate -suppress "extraSampleRate";
	editorTemplate -suppress "textureThreshold"; editorTemplate -suppress "normalThreshold"; editorTemplate -suppress "visibility";	editorTemplate -suppress "intermediateObject"; editorTemplate -suppress "template";
	editorTemplate -suppress "ghosting"; editorTemplate -suppress "useObjectColor"; editorTemplate -suppress "objectColor"; editorTemplate -suppress "drawOverride"; editorTemplate -suppress "lodVisibility";
	editorTemplate -suppress "renderInfo"; editorTemplate -suppress "ghostingControl"; editorTemplate -suppress "ghostCustomSteps"; editorTemplate -suppress "ghostFrames"; editorTemplate -suppress "ghostRangeStart";
	editorTemplate -suppress "ghostRangeEnd"; editorTemplate -suppress "ghostDriver"; editorTemplate -suppress "ignoreSelfShadowing"; editorTemplate -suppress "metadata"; editorTemplate -suppress "x3dMetadataOut";
	editorTemplate -suppress "x3dMetadataIn"; editorTemplate -suppress "audioOut"; editorTemplate -suppress "audioIn";
}


//------------------------------------------------------------------
// Looks to see if global Maya variables exist, and if they don't, 
// it then creates them and sets each to their default value.
//------------------------------------------------------------------
global proc setDefRKOptVars()
{
	putenv "AW_JPEG_Q_FACTOR" "100";
	
	if(`optionVar -exists "x3dEncoding"`){
	}else{
		optionVar -iv x3dEncoding 0;
	}
	if(`optionVar -exists "x3dIsProcTree"`){
	}else{
		optionVar -iv x3dIsProcTree 0;
	}
	if(`optionVar -exists "x3dIsFrom"`){
	}else{
		optionVar -iv x3dIsFrom 1;
	}
	if(`optionVar -exists "x3dNodeTreeWidth"`){
	}else{
		optionVar -iv x3dNodeTreeWidth 0;
	}
	if(`optionVar -exists "x3dFieldAccessChoice"`){
	}else{
		optionVar -iv x3dFieldAccessChoice 1;
	}

	if(`optionVar -exists "x3dFieldTypeChoice"`){
	}else{
		optionVar -iv x3dFieldTypeChoice 1;
	}

	if(`optionVar -exists "x3dExternalPixel"`){
	}else{
		optionVar -iv x3dExternalPixel 0;
	}
	
	if(`optionVar -exists "x3dInternalPixel"`){
	}else{
		optionVar -iv x3dInternalPixel 0;
	}
	
	//X3D Interaction Editor Routing Mode Option
	if(`optionVar -exists "x3dIEMode"`){
	}else{
		print("adding 'optionVar x3dIEMode' setting it to '0'\n");
		optionVar -iv "x3dIEMode" 0;
	}
	
	//Lets us know if we should export location leaf nodes
	//such as lights and cameras as syblings of their
	//parent transforms.
	if(`optionVar -exists "x3dUseEmpties"`){
	}else{
		optionVar -iv "x3dUseEmpties" 1;
	}
	
	if(`optionVar -exists "x3dUnderworld"`){
	}else{
		print("adding 'optionVar x3dUnderworld' and setting it to '0'.\n");
		optionVar -iv "x3dUnderworld" 0;
	}

	if(`optionVar -exists "x3dExportMetadata"`){
	}else{
		print("adding 'optionVar x3dExportMetadata' and  setting it to '1'.\n");
		optionVar -iv "x3dExportMetadata" 1;
	}
	
	if(`optionVar -exists "x3dExportTextures"`){
	}else{
		print("adding 'optionVar x3dExportTextures' and  setting it to '1'.\n");
		optionVar -iv "x3dExportTextures" 1;
	}
	
	if(`optionVar -exists "x3dSaveMayaTextures"`){
	}else{
		print("adding 'optionVar x3dSaveMayaTextures' and  setting it to '1'.\n");
		optionVar -iv "x3dSaveMayaTextures" 1;
	}
	
	if(`optionVar -exists "x3dTextureWidth"`){
	}else{
		print("adding 'optionVar x3dTextureWidth' and  setting it to '256'.\n");
		optionVar -iv "x3dTextureWidth" 256;
	}
	
	if(`optionVar -exists "x3dTextureHeight"`){
	}else{
		print("adding 'optionVar x3dTextureHeight' and  setting it to '256'.\n");
		optionVar -iv "x3dTextureHeight" 256;
	}
	
	if(`optionVar -exists "x3dConsolidateMedia"`){
	}else{
		print("adding 'optionVar x3dConsolidateMedia' and  setting it to '1'.\n");
		optionVar -iv "x3dConsolidateMedia" 1;
	}
	
	if(`optionVar -exists "x3dFileOverwrite"`){
	}else{
		optionVar -iv x3dFileOverwrite 0;
	}
	
	if(`optionVar -exists "x3dAdjustTextureSize"`){
	}else{
		print("adding 'optionVar x3dAdjustTextureSize' and  setting it to '1'.\n");
		optionVar -iv "x3dAdjustTextureSize" 1;
	}
	
	if(`optionVar -exists "x3dTextureDirectory"`){
	}else{
		print("adding 'optionVar x3dTextureDirectory' and  setting it to 'images/'.\n");
		optionVar -sv "x3dTextureDirectory" "images/";
	}
	
	if(`optionVar -exists "x3dTextureFormat"`){
	}else{
		print("adding 'optionVar x3dTextureFormat' and  setting it to '0'.\n");
		optionVar -iv "x3dTextureFormat" 0;
	}
	
	if(`optionVar -exists "x3dExportAudio"`){
	}else{
		print("adding 'optionVar x3dExportAudio' and  setting it to '1'.\n");
		optionVar -iv "x3dExportAudio" 1;
	}
	
	if(`optionVar -exists "x3dAudioDirectory"`){
	}else{
		print("adding 'optionVar x3dAudioDirectory' and  setting it to 'audio/'.\n");
		optionVar -sv "x3dAudioDirectory" "audio/";
	}
	
	if(`optionVar -exists "x3dInlineDirectory"`){
	}else{
		print("adding 'optionVar x3dInlineDirectory' and  setting it to 'inline/'.\n");
		optionVar -sv "x3dInlineDirectory" "inline/";
	}
	
	if(`optionVar -exists "x3dCPV"`){
	}else{
		print("adding 'optionVar x3dCPV' and setting it to '1'.\n");
		optionVar -iv "x3dCPV" 1;
	}
	
	if(`optionVar -exists "x3dNPV"`){
	}else{
		print("adding 'optionVar x3dNPV' and setting it to '1'.\n");
		optionVar -iv "x3dNPV" 1;
	}
	
	if(`optionVar -exists "x3dCreaseAngle"`){
	}else{
		print("adding 'optionVar x3dCreaseAngle' and setting it to '1.57'.\n");
		optionVar -fv "x3dCreaseAngle" 1.57;
	}
	
//	if(`optionVar -exists "x3dSolid"`){
//	}else{
//		print("adding 'optionVar x3dSolid' and setting it to '1'.\n");
//		optionVar -iv "x3dSolid" 1;
//	}
	
	if(`optionVar -exists "x3dNSHAnim"`){
	}else{
		print("adding 'optionVar x3dNSHAnim' and setting it to '1'.\n");
		optionVar -iv "x3dNSHAnim" 1;
	}
	
	if(`optionVar -exists "x3dBaseURL"`){
	}else{
		print("adding 'optionVar x3dBaseURL' and  setting it to ''.\n");
		optionVar -sv "x3dBaseURL" "";
	}
	
	if(`optionVar -exists "x3dNonMovieTextureFormat"`){
	}else{
		print("adding 'optionVar x3dNonMovieTextureFormat' and  setting it to '0' - Current Format.\n");
		optionVar -iv "x3dNonMovieTextureFormat" 0;
	}
	
	if(`optionVar -exists "x3dRigidBodyExport"`){
	}else{
		print("adding 'optionVar x3dRigidBodyExport' and setting it to '0'.\n");
		optionVar -iv "x3dRigidBodyExport" 0 ;
	}
	if(`optionVar -exists "x3dHAnimExport"`){
	}else{
		print("adding 'optionVar x3dHAnimExport' and setting it to '0'.\n");
		optionVar -iv "x3dHAnimExport" 0 ;
	}
	
	if(`optionVar -exists "x3dIODeviceExport"`){
	}else{
		print("adding 'optionVar x3dIODeviceExport' and setting it to '0'.\n");
		optionVar -iv "x3dIODeviceExport" 0 ;
	}
	if(`optionVar -exists "x3dUseRelURL"`)
	{
	}else{
		print("adding 'optionVar x3dUseRelURL' and setting it to '1'.\n");
		optionVar -iv "x3dUseRelURL" 1;
	}
	
	if(`optionVar -exists "x3dUseRelURLW"`)
	{
	}else{
		print("adding 'optionVar x3dUseRelURLW' and setting it to '1'.\n");
		optionVar -iv "x3dUseRelURLW" 1;
	}
	
	if(`optionVar -exists "x3dUseAbsURL"`)
	{
	}else{
		print("adding 'optionVar x3dUseAbsURL' and setting it to '1'.\n");
		optionVar -iv "x3dUseAbsURL" 1;
	}
	
	if(`optionVar -exists "x3dJavaMemory"`)
	{
	}else{
		print("adding 'optionVar x3dJavaMemory' and setting it to '64'\n");
		optionVar -iv "x3dJavaMemory" 64;
	}
	
	if(`optionVar -exists "x3dBCFlag"`)
	{
	}else{
		print("adding 'optionVar x3dBCFlag' and setting it to '1'.\n");
		optionVar -iv "x3dBCFlag" 1;
	}
}

print("The 'x3d.mel' has been sourced.\n");