//--------------------------------------------------------------
// procedure for suppressing default MPxTransform attributes in
// the attribute editor
//--------------------------------------------------------------
global proc x3dMPxTransformSuppression()
{
	editorTemplate -suppress "translate"; editorTemplate -suppress "rotate"; editorTemplate -suppress "rotateOrder"; editorTemplate -suppress "scale"; editorTemplate -suppress "shear"; editorTemplate -suppress "rotatePivot";
	editorTemplate -suppress "rotatePivotTranslate";editorTemplate -suppress "scalePivot"; editorTemplate -suppress "scalePivotTranslate"; editorTemplate -suppress "rotateAxis";editorTemplate -suppress "minTransLimit";
	editorTemplate -suppress "maxTransLimit"; editorTemplate -suppress "minRotLimit"; editorTemplate -suppress "maxRotLimit"; editorTemplate -suppress "minScaleLimit";	editorTemplate -suppress "maxScaleLimit";
	editorTemplate -suppress "geometry"; editorTemplate -suppress "selectHandle"; editorTemplate -suppress "rotateQuaternion"; editorTemplate -suppress "showManipDefault";	editorTemplate -suppress "dynamics";
	editorTemplate -suppress "displayRotatePivot"; editorTemplate -suppress "displayHandle"; editorTemplate -suppress "inheritsTransform"; editorTemplate -suppress "displayScalePivot"; editorTemplate -suppress "displayLocalAxis";
	editorTemplate -suppress "maxScaleLimitEnable"; editorTemplate -suppress "minScaleLimitEnable"; editorTemplate -suppress "maxRotLimitEnable"; editorTemplate -suppress "minRotLimitEnable";	editorTemplate -suppress "maxTransLimitEnable";
	editorTemplate -suppress "minTransLimitEnable";	editorTemplate -suppress "mentalRayControls";
}

//--------------------------------------------------------------
// procedure for suppressing default maya attributes in the
// attribute editor
//--------------------------------------------------------------
global proc x3dOptionSuppression()
{
	editorTemplate -suppress "input"; editorTemplate -suppress "caching"; editorTemplate -suppress "nodeState"; editorTemplate -suppress "localPosition"; editorTemplate -suppress "compInstObjGroups";
	editorTemplate -suppress "instObjGroups"; editorTemplate -suppress "xWidth"; editorTemplate -suppress "zWidth"; editorTemplate -suppress "dispType"; editorTemplate -suppress "antialiasingLevel";
	editorTemplate -suppress "shadingSamples"; editorTemplate -suppress "maxShadingSamples"; editorTemplate -suppress "maxVisibilitySamplesOverride"; editorTemplate -suppress "maxVisibilitySamples";
	editorTemplate -suppress "volumeSamples"; editorTemplate -suppress "opposite"; editorTemplate -suppress "castsShadows"; editorTemplate -suppress "receiveShadows"; editorTemplate -suppress "motionBlur";
	editorTemplate -suppress "primaryVisibility"; editorTemplate -suppress "visibleInReflections"; editorTemplate -suppress "visibleInRefractions"; editorTemplate -suppress "doubleSided"; editorTemplate -suppress "opposite";
	editorTemplate -suppress "geometryAntialiasingOverride"; editorTemplate -suppress "antialiasingLevel"; editorTemplate -suppress "shadingSamplesOverride"; editorTemplate -suppress "volumeSamplesOverride";
	editorTemplate -suppress "depthJitter"; editorTemplate -suppress "boundingBoxScale"; editorTemplate -suppress "featureDisplacement"; editorTemplate -suppress "initialSampleRate"; editorTemplate -suppress "extraSampleRate";
	editorTemplate -suppress "textureThreshold"; editorTemplate -suppress "normalThreshold"; editorTemplate -suppress "visibility";	editorTemplate -suppress "intermediateObject"; editorTemplate -suppress "template";
	editorTemplate -suppress "ghosting"; editorTemplate -suppress "useObjectColor"; editorTemplate -suppress "objectColor"; editorTemplate -suppress "drawOverride"; editorTemplate -suppress "lodVisibility";
	editorTemplate -suppress "renderInfo"; editorTemplate -suppress "ghostingControl"; editorTemplate -suppress "ghostCustomSteps"; editorTemplate -suppress "ghostFrames"; editorTemplate -suppress "ghostRangeStart";
	editorTemplate -suppress "ghostRangeEnd"; editorTemplate -suppress "ghostDriver"; editorTemplate -suppress "ignoreSelfShadowing"; editorTemplate -suppress "metadata"; editorTemplate -suppress "x3dMetadataOut";
	editorTemplate -suppress "x3dMetadataIn"; editorTemplate -suppress "audioOut"; editorTemplate -suppress "audioIn";
}

// Stackoverflow post on how to add menuItems to an existing Maya Menu
// https://stackoverflow.com/questions/19236669/how-do-i-safely-add-menuitems-to-an-existing-menu-in-maya-mel

global proc checkForFileMenuItems()
{
    global string $gMainFileMenu;
    buildFileMenu();
    
    string $menus[] = `menu -q -ia $gMainFileMenu`;
    
    for($menu in $menus)
    {
        string $parent = "";
        if(catchQuiet($parent = `menu -q -l $menu`))
        {
            print("MenuItem: " + $menu + "\n");
        }
        else
        {
            print("Parent: " + $parent + ", Menu: " + $menu + "\n");
        }
    }
}


global proc addRawKeeMenuItemsToFileMenu()
{
    global string $gMainFileMenu;
    buildFileMenu();

    menuItem -divider true -dividerLabel "RawKee X3D Export" -insertAfter "exportActiveFileOptions" -parent $gMainFileMenu rawkeeIODivider;
    menuItem -label "X3D - Export All"                       -insertAfter "rawkeeIODivider"         -parent $gMainFileMenu -command "rkX3DExport"                      rawkeeIOExport;
    menuItem -image ":menu_options.png"                      -insertAfter "rawkeeIOExport"          -parent $gMainFileMenu -command "rkX3DExportOp"    -optionBox true rawkeeIOExportOp;
    menuItem -label "X3D - Export Selected"                  -insertAfter "rawkeeIOExportOp"        -parent $gMainFileMenu -command "rkX3DSelExport"                   rawkeeIOSelExport;
    menuItem -image ":menu_options.png"                      -insertAfter "rawkeeIOSelExport"       -parent $gMainFileMenu -command "rkX3DSelExportOp" -optionBox true rawkeeIOSelExportOp;
    
    menuItem -label "Send To Castle"                         -insertAfter "sendToDivider"           -parent $gMainFileMenu                               -sm true        rawkeeCastleMenu;
    menuItem -label "Send All"                                                                      -parent rawkeeCastleMenu -command "rkCASExport"                      rawkeeCASExport;
    menuItem -image ":menu_options.png"                      -insertAfter "rawkeeCASExport"         -parent rawkeeCastleMenu -command "rkCASExportOp"    -optionBox true rawkeeCASExportOp;
    menuItem -label "Send Selected"                          -insertAfter "rawkeeCASExportOp"       -parent rawkeeCastleMenu -command "rkCASSelExport"                   rawkeeCASSelExport;
    menuItem -image ":menu_options.png"                      -insertAfter "rawkeeCASSelExport"      -parent rawkeeCastleMenu -command "rkCASSelExportOp" -optionBox true rawkeeCASSelExportOp;
    menuItem -label "Set Castle Project"                     -insertAfter "rawkeeCASSelExportOp"    -parent rawkeeCastleMenu -command "rkCASSetProject"                  rawkeeCASSetProject;

}

global proc removeRawKeeMenuItemsFromFileMenu()
{
    deleteUI -mi rawkeeIOSelExportOp;
    deleteUI -mi rawkeeIOSelExport;
    deleteUI -mi rawkeeIOExportOp;
    deleteUI -mi rawkeeIOExport;
    deleteUI -mi rawkeeIODivider;
    
    deleteUI -mi rawkeeCASSetProject;
    deleteUI -mi rawkeeCASSelExportOp;
    deleteUI -mi rawkeeCASSelExport;
    deleteUI -mi rawkeeCASExportOp;
    deleteUI -mi rawkeeCASExport;
    deleteUI -mi rawkeeCastleMenu;
}


//------------------------------------------------------------------
// Looks to see if global Maya variables exist, and if they don't, 
// it then creates them and sets each to their default value.
//------------------------------------------------------------------
global proc setDefRKOptVars()
{
	putenv "AW_JPEG_Q_FACTOR" "100";
	
    //-------------------------------------------
    // New RawKee Python optionVars
    //-------------------------------------------
    if(`optionVar -exists "rkCastlePrjDir"`)
    {
    }else{
        print("Creating the optionVar to hold the current Castle Game Engine Project Directory");
		optionVar -sv "rkCastlePrjDir" "";
    }
    
    if(`optionVar -exists "rkSunrizePrjDir"`)
    {
    }else{
        print("Creating the optionVar to hold the current Castle Game Engine Project Directory");
		optionVar -sv "rkSunrizePrjDir" "";
    }
    
    if(`optionVar -exists "rkPrjDir"`)
    {
    }else{
        print("Creating the optionVar to hold the a RawKee Project Directory for general X3D Export");
		optionVar -sv "rkPrjDir" "";
    }

    if(`optionVar -exists "rkBaseDomain"`)
    {
    }else{
        print("Creating the optionVar to hold the a RawKee Project Directory for general X3D Export");
		optionVar -sv "rkBaseDomain" "";
    }

    if(`optionVar -exists "rkBasePath"`)
    {
    }else{
        print("Creating the optionVar to hold the a RawKee Project Directory for general X3D Export");
		optionVar -sv "rkBasePath" "";
    }
    
    if(`optionVar -exists "rkImagePath"`)
    {
    }else{
        print("Creating the optionVar to hold the a RawKee Project Directory for general X3D Export");
		optionVar -sv "rkImagePath" "images/";
    }
    
    if(`optionVar -exists "rkAudioPath"`)
    {
    }else{
        print("Creating the optionVar to hold the a RawKee Project Directory for general X3D Export");
		optionVar -sv "rkAudioPath" "audio/";
    }
    
    if(`optionVar -exists "rkInlinePath"`)
    {
    }else{
        print("Creating the optionVar to hold the a RawKee Project Directory for general X3D Export");
		optionVar -sv "rkInlinePath" "inline/";
    }
    
	if(`optionVar -exists "rk2dTexWrite"`){
	}else{
    //bool
		optionVar -iv rk2dTexWrite 1;
	}
	
	if(`optionVar -exists "rkMovTexWrite"`){
	}else{
    //bool
		optionVar -iv rkMovTexWrite 1;
	}
	
	if(`optionVar -exists "rkAudioTexWrite"`){
	}else{
    //bool
		optionVar -iv rkAudioTexWrite 1;
	}
	
	if(`optionVar -exists "rk2dFileFormat"`){
	}else{
    //bool
		optionVar -iv rk2dFileFormat 0;
	}
	
	if(`optionVar -exists "rkMovFileFormat"`){
	}else{
    //bool
		optionVar -iv rkMovFileFormat 0;
	}
	
	if(`optionVar -exists "rkAudioFileFormat"`){
	}else{
    //bool
		optionVar -iv rkAudioFileFormat 0;
	}
	
	if(`optionVar -exists "rkExportCameras"`){
	}else{
    //bool
		optionVar -iv rkExportCameras 1;
	}
	
	if(`optionVar -exists "rkExportLights"`){
	}else{
    //bool
		optionVar -iv rkExportLights 1;
	}
	
	if(`optionVar -exists "rkExportSounds"`){
	}else{
    //bool
		optionVar -iv rkExportSounds 1;
	}
	
	if(`optionVar -exists "rkExportMetadata"`){
	}else{
    //bool
		optionVar -iv rkExportMetadata 0;
	}
	
	if(`optionVar -exists "rkProcTexNode"`){
	}else{
    //bool
		optionVar -iv rkProcTexNode 0;
	}
	
	if(`optionVar -exists "rkFileTexNode"`){
	}else{
    //bool
		optionVar -iv rkFileTexNode 0;
	}
	
	if(`optionVar -exists "rkLayerTexNode"`){
	}else{
    //bool
		optionVar -iv rkLayerTexNode 0;
	}
	
	if(`optionVar -exists "rkAdjTexSize"`){
	}else{
    //bool
		optionVar -iv rkAdjTexSize 0;
	}
	
	if(`optionVar -exists "rkDefTexWidth"`){
	}else{
    //bool
		optionVar -iv rkDefTexWidth 256;
	}
	
	if(`optionVar -exists "rkDefTexHeight"`){
	}else{
    //bool
		optionVar -iv rkDefTexHeight 256;
	}
}

print("The 'x3d.mel' has been sourced.\n");