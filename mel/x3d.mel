//
// Copyright (C) 2004-2005 North Dakota State University (http://atl.ndsu.edu/resources/maya_x3d.php) 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: x3d.mel
//
// MEL Command: x3d
//
// Authors:	Aaron Bergstrom
//         	Computer Visualization Manger
//         	NDSU Archaeology Technologies Laboratory
//         	http://atl.ndsu.edu/
//


/********************************************************************
*********************************************************************
**          PROCEDURES TO IMPLEMENT X3DROUTE NODE               **
*********************************************************************
********************************************************************/

//--------------------------------------------------------------------
// Procedure Called to setup X3D plugin menu upon plugin 
// initialization
//--------------------------------------------------------------------

global proc setUpX3DMenus()
{
	putenv "AW_JPEG_Q_FACTOR" "100";
	
	if(`optionVar -exists "x3dEncoding"`){
	}else{
		optionVar -iv x3dEncoding 0;
	}
	if(`optionVar -exists "x3dIsProcTree"`){
	}else{
		optionVar -iv x3dIsProcTree 0;
	}
	if(`optionVar -exists "x3dIsFrom"`){
	}else{
		optionVar -iv x3dIsFrom 1;
	}
	if(`optionVar -exists "x3dNodeTreeWidth"`){
	}else{
		optionVar -iv x3dNodeTreeWidth 0;
	}
	if(`optionVar -exists "x3dFieldAccessChoice"`){
	}else{
		optionVar -iv x3dFieldAccessChoice 1;
	}

	if(`optionVar -exists "x3dFieldTypeChoice"`){
	}else{
		optionVar -iv x3dFieldTypeChoice 1;
	}

	if(`optionVar -exists "x3dExternalPixel"`){
	}else{
		optionVar -iv x3dExternalPixel 0;
	}
	
	if(`optionVar -exists "x3dInternalPixel"`){
	}else{
		optionVar -iv x3dInternalPixel 0;
	}
	
	//X3D Interaction Editor Routing Mode Option
	if(`optionVar -exists "x3dIEMode"`){
	}else{
		print("adding 'optionVar x3dIEMode' setting it to '0'\n");
		optionVar -iv "x3dIEMode" 0;
	}
	
	//Lets us know if we should export location leaf nodes
	//such as lights and cameras as syblings of their
	//parent transforms.
	if(`optionVar -exists "x3dUseEmpties"`){
	}else{
		optionVar -iv "x3dUseEmpties" 1;
	}
	
	if(`optionVar -exists "x3dUnderworld"`){
	}else{
		print("adding 'optionVar x3dUnderworld' and setting it to '0'.\n");
		optionVar -iv "x3dUnderworld" 0;
	}

	if(`optionVar -exists "x3dExportMetadata"`){
	}else{
		print("adding 'optionVar x3dExportMetadata' and  setting it to '1'.\n");
		optionVar -iv "x3dExportMetadata" 1;
	}
	
	if(`optionVar -exists "x3dExportTextures"`){
	}else{
		print("adding 'optionVar x3dExportTextures' and  setting it to '1'.\n");
		optionVar -iv "x3dExportTextures" 1;
	}
	
	if(`optionVar -exists "x3dSaveMayaTextures"`){
	}else{
		print("adding 'optionVar x3dSaveMayaTextures' and  setting it to '1'.\n");
		optionVar -iv "x3dSaveMayaTextures" 1;
	}
	
	if(`optionVar -exists "x3dTextureWidth"`){
	}else{
		print("adding 'optionVar x3dTextureWidth' and  setting it to '256'.\n");
		optionVar -iv "x3dTextureWidth" 256;
	}
	
	if(`optionVar -exists "x3dTextureHeight"`){
	}else{
		print("adding 'optionVar x3dTextureHeight' and  setting it to '256'.\n");
		optionVar -iv "x3dTextureHeight" 256;
	}
	
	if(`optionVar -exists "x3dConsolidateMedia"`){
	}else{
		print("adding 'optionVar x3dConsolidateMedia' and  setting it to '1'.\n");
		optionVar -iv "x3dConsolidateMedia" 1;
	}
	
	if(`optionVar -exists "x3dFileOverwrite"`){
	}else{
		optionVar -iv x3dFileOverwrite 0;
	}
	
	if(`optionVar -exists "x3dAdjustTextureSize"`){
	}else{
		print("adding 'optionVar x3dAdjustTextureSize' and  setting it to '1'.\n");
		optionVar -iv "x3dAdjustTextureSize" 1;
	}
	
	if(`optionVar -exists "x3dTextureDirectory"`){
	}else{
		print("adding 'optionVar x3dTextureDirectory' and  setting it to 'images/'.\n");
		optionVar -sv "x3dTextureDirectory" "images/";
	}
	
	if(`optionVar -exists "x3dTextureFormat"`){
	}else{
		print("adding 'optionVar x3dTextureFormat' and  setting it to '0'.\n");
		optionVar -iv "x3dTextureFormat" 0;
	}
	
	if(`optionVar -exists "x3dExportAudio"`){
	}else{
		print("adding 'optionVar x3dExportAudio' and  setting it to '1'.\n");
		optionVar -iv "x3dExportAudio" 1;
	}
	
	if(`optionVar -exists "x3dAudioDirectory"`){
	}else{
		print("adding 'optionVar x3dAudioDirectory' and  setting it to 'audio/'.\n");
		optionVar -sv "x3dAudioDirectory" "audio/";
	}
	
	if(`optionVar -exists "x3dInlineDirectory"`){
	}else{
		print("adding 'optionVar x3dInlineDirectory' and  setting it to 'inline/'.\n");
		optionVar -sv "x3dInlineDirectory" "inline/";
	}
	
	if(`optionVar -exists "x3dCPV"`){
	}else{
		print("adding 'optionVar x3dCPV' and setting it to '1'.\n");
		optionVar -iv "x3dCPV" 1;
	}
	
	if(`optionVar -exists "x3dNPV"`){
	}else{
		print("adding 'optionVar x3dNPV' and setting it to '1'.\n");
		optionVar -iv "x3dNPV" 1;
	}
	
	if(`optionVar -exists "x3dCreaseAngle"`){
	}else{
		print("adding 'optionVar x3dCreaseAngle' and setting it to '1.57'.\n");
		optionVar -fv "x3dCreaseAngle" 1.57;
	}
	
//	if(`optionVar -exists "x3dSolid"`){
//	}else{
//		print("adding 'optionVar x3dSolid' and setting it to '1'.\n");
//		optionVar -iv "x3dSolid" 1;
//	}
	
	if(`optionVar -exists "x3dNSHAnim"`){
	}else{
		print("adding 'optionVar x3dNSHAnim' and setting it to '1'.\n");
		optionVar -iv "x3dNSHAnim" 1;
	}
	
	if(`optionVar -exists "x3dBaseURL"`){
	}else{
		print("adding 'optionVar x3dBaseURL' and  setting it to ''.\n");
		optionVar -sv "x3dBaseURL" "";
	}
	
	if(`optionVar -exists "x3dNonMovieTextureFormat"`){
	}else{
		print("adding 'optionVar x3dNonMovieTextureFormat' and  setting it to '0' - Current Format.\n");
		optionVar -iv "x3dNonMovieTextureFormat" 0;
	}
	
	if(`optionVar -exists "x3dRigidBodyExport"`){
	}else{
		print("adding 'optionVar x3dRigidBodyExport' and setting it to '0'.\n");
		optionVar -iv "x3dRigidBodyExport" 0 ;
	}
	if(`optionVar -exists "x3dHAnimExport"`){
	}else{
		print("adding 'optionVar x3dHAnimExport' and setting it to '0'.\n");
		optionVar -iv "x3dHAnimExport" 0 ;
	}
	
	if(`optionVar -exists "x3dIODeviceExport"`){
	}else{
		print("adding 'optionVar x3dIODeviceExport' and setting it to '0'.\n");
		optionVar -iv "x3dIODeviceExport" 0 ;
	}
	if(`optionVar -exists "x3dUseRelURL"`)
	{
	}else{
		print("adding 'optionVar x3dUseRelURL' and setting it to '1'.\n");
		optionVar -iv "x3dUseRelURL" 1;
	}
	
	if(`optionVar -exists "x3dUseRelURLW"`)
	{
	}else{
		print("adding 'optionVar x3dUseRelURLW' and setting it to '1'.\n");
		optionVar -iv "x3dUseRelURLW" 1;
	}
	
	if(`optionVar -exists "x3dUseAbsURL"`)
	{
	}else{
		print("adding 'optionVar x3dUseAbsURL' and setting it to '1'.\n");
		optionVar -iv "x3dUseAbsURL" 1;
	}
	
	if(`optionVar -exists "x3dJavaMemory"`)
	{
	}else{
		print("adding 'optionVar x3dJavaMemory' and setting it to '64'\n");
		optionVar -iv "x3dJavaMemory" 64;
	}
	
	if(`optionVar -exists "x3dBCFlag"`)
	{
	}else{
		print("adding 'optionVar x3dBCFlag' and setting it to '1'.\n");
		optionVar -iv "x3dBCFlag" 1;
	}
	
	print("Setting Up  X3D Menus\n");

//--------------------------------------------------------------------
// Call to get a reference to the main window
//--------------------------------------------------------------------
	global string $gMainWindow;
	setParent $gMainWindow;

//--------------------------------------------------------------------
// Creating a menu called " X3D Plug-in" & attaching it to the 
// menubar in the main maya window
//--------------------------------------------------------------------
	menu - label "RawKee (X3D)" -allowOptionBoxes true x3dPluginMenu;
	setParent -menu x3dPluginMenu;

//--------------------------------------------------------------------
// Creating a submenu for  defined nodes used for x3d export
//--------------------------------------------------------------------
	menuItem -subMenu true -label "Add Scene Nodes" -allowOptionBoxes true;
	menuItem -label "Viewpoint" -c "createX3DViewpoints";
	menuItem -label "NavigationInfo" -c "createX3DNavigationInfos";  
	menuItem -label "WorldInfo" -c "createX3DWorldInfos";
	menuItem -label "DirectionalLight" -c "createX3DDirectionalLights";
	menuItem -label "SpotLight" -c "createX3DSpotLights";
	menuItem -label "PointLight" -c "createX3DPointLights";
	setParent -menu ..;
	
	menuItem -subMenu true -label "Add Grouping Nodes" -allowOptionBoxes true;
	menuItem -label "Transform" -c "createX3DTransforms";
	menuItem -label "Group" -c "createX3DGroups";
	menuItem -label "Switch" -c "createX3DSwitches";
	menuItem -label "Collision" -c "createX3DCollisions";
	menuItem -label "LOD" -c "createX3DlodGroup";
	menuItem -label "Billboard" -c "createX3DBillboards";
	setParent -menu ..;
	
	menuItem -subMenu true -label "Add Primitives" -allowOptionBoxes true;
	menuItem -label "Box" -c "createX3DBoxes";
	menuItem -label "Cone"  -c "createX3DCones";
	menuItem -label "Cylinder" -c "createX3DCylinders";
	menuItem -label "Sphere" -c "createX3DSpheres";
	menuItem -label "IndexedFaceSet" -c "createX3DIndexedFaceSets";
	setParent -menu ..;
	
	menuItem -subMenu true -label "Add Audio Nodes" -allowOptionBoxes true;
	menuItem -label "AudioClip" -c "createX3DAudioClips";
	menuItem -label "Sound" -c "createX3DSounds";
	setParent -menu ..;
	
	menuItem -subMenu true -label "Add Networking Nodes" -allowOptionBoxes true;
	menuItem -label "Anchor" -c "createX3DAnchors";
	menuItem -label "Inline" -c "createX3DInlines";
	menuItem -label "LoadSensor" -c "createX3DLoadSensors";
	setParent -menu ..;
	
	menuItem -subMenu true -label "Add Event Utility Nodes" -allowOptionBoxes true;
	menuItem -label "BooleanFilter" -c "createX3DBooleanFilters";
	menuItem -label "BooleanSequencer" -c "createX3DBooleanSequencers";
	menuItem -label "BooleanToggle" -c "createX3DBooleanToggle";
	menuItem -label "BooleanTrigger" -c "createX3DBooleanTrigger";
	menuItem -label "IntegerSequencer" -c "createX3DIntegerSequencer";
	menuItem -label "IntegerTrigger" -c "createX3DIntegerTrigger";
	menuItem -label "TimeTrigger" -c "createX3DTimeTrigger";
	
	setParent -menu ..;
	
//	menuItem -subMenu true -label "Add HAnim Nodes" -allowOptionBoxes true;
//	setParent -menu ..;
	
	menuItem -subMenu true -label "Add Metadata Nodes" -allowOptionBoxes true;
	menuItem -label "MetadataDouble" -c "createX3DMetadataDoubles";
	menuItem -label "MetadataFloat" -c "createX3DMetadataFloats";
	menuItem -label "MetadataInteger" -c "createX3DMetadataIntegers";
	menuItem -label "MetadataSet" -c "createX3DMetadataSets";
	menuItem -label "MetadataString" -c "createX3DMetadataStrings";
	setParent -menu ..;
	
	menuItem -subMenu true -label "Add Sensor Nodes" -allowOptionBoxes true;
	menuItem -label "CylinderSensor" -c "createX3DCylinderSensors";
	menuItem -label "KeySensor" -c "createX3DKeySensors";
	menuItem -label "PlaneSensor" -c "createX3DPlaneSensors";
	menuItem -label "ProximitySensor" -c "createX3DProximitySensors";
	menuItem -label "SphereSensor" -c "createX3DSphereSensors";
	menuItem -label "StringSensor" -c "createX3DStringSensors";
	menuItem -label "TimeSensor" -c "createX3DTimeSensors";
	menuItem -label "TouchSensor" -c "createX3DTouchSensors";
	menuItem -label "VisibilitySensor" -c "createX3DVisibilitySensors";
	menuItem -label "GamepadSensor" -c "createX3DGamepadSensors";
	setParent -menu ..;
	
	menuItem -subMenu true -label "Add Animation Nodes" -allowOptionBoxes true;
	menuItem -label "ColorInterpolator" -c "createX3DColorInterpolators";
	menuItem -label "CoordinateInterpolator" -c "createX3DCoordinateInterpolators";
	menuItem -label "NormalInterpolator" -c "createX3DNormalInterpolators";
	menuItem -label "OrientationInterpolator" -c "createX3DOrientationInterpolators";
	menuItem -label "PositionInterpolator" -c "createX3DPositionInterpolators";
	menuItem -label "ScalarInterpolator" -c "createX3DScalarInterpolators";
	setParent -menu ..;
	
	menuItem -subMenu true -label "Add User-Defined Nodes" -allowOptionBoxes true;
	menuItem -label "Script" -c "createX3DScripts";
	setParent -menu ..;
	
//	menuItem -subMenu true -label "Add Geospatial Nodes" -allowOptionBoxes true;
//	setParent -menu ..;
	
//	menuItem -subMenu true -label "Add DIS Nodes" -allowOptionBoxes true;
//	setParent -menu ..;
	
//--------------------------------------------------------------------
// Finishing off the  X3D Plug-in menu
//--------------------------------------------------------------------
	menuItem -divider true;
	menuItem -label "X3D Interaction Editor" -command "showX3DIEditor";
	menuItem -label "X3D Character Editor" -command "x3dCharacterEditor";
	menuItem -label "X3D Animation Editor" -command "x3dAnimationEditor";
	menuItem -divider true;
	menuItem -subMenu true -label "Utility Commands" -allowOptionBoxes true;
	menuItem -label "Set All MultiTexture Modes: Default" -c ("x3dSetAllSingleTextureModes 0");
	menuItem -label "Set All MultiTexture Modes: Replace" -c ("x3dSetAllSingleTextureModes 1");
	menuItem -label "Set All MultiTexture Modes: Modulate" -c ("x3dSetAllSingleTextureModes 2");
	menuItem -label "Set All MultiTexture Modes: Add" -c ("x3dSetAllSingleTextureModes 3");
	menuItem -divider true;
	menuItem -label "Make All Textures PixelTextures" -c ("x3dSetAllTexturesPixel");
	menuItem -label "Make All Textures ImageTextures" -c ("x3dSetAllTexturesFile");
	menuItem -divider true;
	menuItem -label "Export Scene Prep" -c ("x3dPrepareSceneForExport");
	setParent -menu ..;
	menuItem -divider true;
	menuItem -label "Plug-in Tutorials" -command "showX3DTutorials";

//---------------------------------------------------------------------------------
// A menuItem that displays window with information about the Archaeology Tech Lab
// and this plugin
//---------------------------------------------------------------------------------

	menuItem -label "RawKee Developers" -command "x3dShowAbout";
	establishX3DScene();
}



//--------------------------------------------------------------------
// Procedure called to remove -X3D plugin menu upon plugin
// removal
//--------------------------------------------------------------------

global proc removeX3DMenus()
{
	print("\nRemoving X3D Menus\n");

//--------------------------------------------------------------------
// Call to get a reference to the main window
//--------------------------------------------------------------------
	global string $gMainWindow;
	setParent $gMainWindow;

//--------------------------------------------------------------------
// Deletion of a User Interface element, here we are deleting the 
//  X3D Plug-in menu, so that it can be readded upon reloading
// the plug-in.
//--------------------------------------------------------------------
	deleteUI x3dPluginMenu;
	demolishX3DScene();
}

global proc establishX3DScene()
{
//	global int $listCanUpdate;
//	source "HyperGraphEdMenu.mel";
//	scriptJob -cu true -event "NameChanged" "updateIERouteListings";
//	scriptJob -cu true -event "SelectionChanged" "updateIERouteListings";
//	$listCanUpdate = 1;
}

global proc demolishX3DScene()
{
	print("\nDemolish X3DScene\n");
}

//--------------------------------------------------------------------
// This procedure sets up "Options Panel for X3D Exporter plugin
//--------------------------------------------------------------------

global proc int x3dFormatOptions(string $parent, string $action, string $settings, string $callback)
{
	optionVar -iv x3dEncoding 0;
	return x3dOptions($parent, $action, $settings, $callback);
}

global proc int x3dvFormatOptions(string $parent, string $action, string $settings, string $callback)
{
	optionVar -iv x3dEncoding 1;
	return x3dOptions($parent, $action, $settings, $callback);
}

global proc int vrml97FormatOptions(string $parent, string $action, string $settings, string $callback)
{
	optionVar -iv x3dEncoding 2;
	return x3dOptions($parent, $action, $settings, $callback);
}

global proc int x3dbFormatOptions(string $parent, string $action, string $settings, string $callback)
{
	optionVar -iv x3dEncoding 3;
	return x3dOptions($parent, $action, $settings, $callback);
}

global proc int x3dOptions(string $parent, string $action, string $settings, string $callback)
{
	int $vRawKee = 1;
	if ($action=="post"){
	//-------------------------------------------------------------------------
	// If true the panel that allows the user to select the X3D export options.
	// is created.
	//-------------------------------------------------------------------------

	//-------------------------------------------------------------------------
	// Gets a reference to the panel that holds the option panel... I think.
	// I got this from the VRML97 plugin
	//-------------------------------------------------------------------------
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		formLayout -e -vis false optionsBoxForm;
	//-------------------------------------------------------------------------
	// Beginning of Options Panel Layout
	//-------------------------------------------------------------------------
		int $encCheck = `optionVar -q x3dEncoding`;
		columnLayout -adj true;
		
		frameLayout -cll true -cl false -bv true -bs "etchedIn" -font "obliqueLabelFont" -label "Export Options" EncodeFrame;
			columnLayout -adj true;
				if($encCheck != 2)
				{

					rowLayout -columnWidth3 20 400 110 -numberOfColumns 3;
						text -label "    ";
						text -label "Export Components in Addition to Immersive Profile:" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
						text -label "    ";
					setParent ..;//columnLayout
			
					rowLayout -columnWidth2 20 510 -numberOfColumns 2;
						int $isRbExport = `optionVar -q "x3dRigidBodyExport"`;
						text - label "    ";
						string $useRbExport = `checkBox -label "RigidBodyPhysics - Level:2" -v $isRbExport -onc "optionVar -iv x3dRigidBodyExport 1" -ofc "optionVar -iv x3dRigidBodyExport 0"`;
					setParent ..;
		
					rowLayout -columnWidth2 20 510 -numberOfColumns 2;
						int $isHAExport = `optionVar -q "x3dHAnimExport"`;
						text - label "    ";
						string $useHAExport = `checkBox -label "H-Anim - Level:1"                             -v $isHAExport -onc "optionVar -iv x3dHAnimExport 1" -ofc "optionVar -iv x3dHAnimExport 0"`;
					setParent ..;

					rowLayout -columnWidth2 20 510 -numberOfColumns 2;
						int $isNSHAnim = `optionVar -q x3dNSHAnim`;
						text - label "    ";
						string $useNSHAnim  = `checkBox -label "Export Compliant H-Anim Node Names" -v $isNSHAnim  -onc "optionVar -iv x3dNSHAnim 1"     -ofc "optionVar -iv x3dNSHAnim 0"`;
					setParent ..;//`optionVar -q x3dNSHAnim`;
		
					rowLayout -columnWidth2 20 510 -numberOfColumns 2;
						int $isIODExport = `optionVar -q "x3dIODeviceExport"`;
						text - label "    ";
						string $useIODExport = `checkBox -label "Xj3D-IODevice - Level:2" -v $isIODExport -onc "optionVar -iv x3dIODeviceExport 1" -ofc "optionVar -iv x3dIODeviceExport 0"`;
					setParent ..;
		
					rowLayout -columnWidth1 530 -numberOfColumns 1;
						text -label "    ";
					setParent ..;//columnLayout optionVar -iv x3dEncoding 1;
				}
				if($encCheck == 3)
				{
					rowLayout -columnWidth3 20 400 110 -numberOfColumns 3;
						text -label "    ";
						text -label "Binary Encoding by Yumetech (www.yumetech.com):" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
						text -label "    ";
					setParent ..;//columnLayout
			
					rowLayout -columnWidth5 38 65 65 65 297 -numberOfColumns 5;
						text -label "    ";
//						string $bcm01;
						string $rbcm = `radioCollection`;
							string $bcm01 = `radioButton -label "Fastest" -onc "optionVar -iv x3dBCFlag 0"`;
							string $bcm02 = `radioButton -label "Smallest" -onc "optionVar -iv x3dBCFlag 1"`;
							string $bcm03 = `radioButton -label "Lossy" -onc "optionVar -iv x3dBCFlat 2"`;
						int $x3dBCF = `optionVar -q "x3dBCFlag"`;
						switch($x3dBCF)
						{
							case 0:
								radioCollection -e -select $bcm01 $rbcm;
								break;
							case 1:
								radioCollection -e -select $bcm02 $rbcm;
								break;
							case 2:
								radioCollection -e -select $bcm03 $rbcm;
								break;
							default:
								radioCollection -e -select $bcm02 $rbcm;
								break;
						}
						text -label "    ";
					setParent ..;//columnLayout
				
					rowLayout -columnWidth2 30 500 -numberOfColumns 2;
						int $jmValue = `optionVar -q "x3dJavaMemory"`;
						text -label "    ";
						intSliderGrp -label "Memory Usage" -field true -minValue 64 -maxValue 1024 -value $jmValue  -cc "x3dChangeJavaMemory" javaMemControl;
					setParent ..;

					rowLayout -columnWidth1 530 -numberOfColumns 1;
						text -label "    ";
					setParent ..;//columnLayout
				}	
			
				rowLayout -columnWidth3 20 250 260 -numberOfColumns 3;
					text -label "    ";
					text -label "Grouping Nodes: Transforms, Groups, etc..." -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth2 20 510 -numberOfColumns 2;
					int $isUseEmpties = `optionVar -q "x3dUseEmpties"`;
					text - label "    ";
					string $useEmptiesChkBx = `checkBox -label "Export Empty Grouping Nodes" -v $isUseEmpties -onc "optionVar -iv x3dUseEmpties 1" -ofc "optionVar -iv x3dUseEmpties 0"`;
				setParent ..;
		
				rowLayout -columnWidth1 530 -numberOfColumns 1;
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth3 20 200 310 -numberOfColumns 3;
					text -label "    ";
					text -label "Metadata Options" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth2 20 510 -numberOfColumns 2;
					int $isMExport = `optionVar -q "x3dExportMetadata"`;
					text - label "    ";
					string $metaChkBx = `checkBox -label "Export Metadata" -v $isMExport -onc "optionVar -iv x3dExportMetadata 1" -ofc "optionVar -iv x3dExportMetadata 0"`;
				setParent ..;
		
				rowLayout -columnWidth1 530 -numberOfColumns 1;
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth3 20 200 310 -numberOfColumns 3;
					text -label "    ";
					text -label "Media Reorganization Options" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth2 20 510 -numberOfColumns 2;
					int $isCons = `optionVar -q "x3dConsolidateMedia"`;
					text -label "    ";
					string $consChkBx = `checkBox -label "Consolidate Files Locally" -v $isCons -onc "optionVar -iv x3dConsolidateMedia 1" -ofc "optionVar -iv x3dConsolidateMedia 0"`;
				setParent ..;
		
				rowLayout -columnWidth2 20 510 -numberOfColumns 2;
					int $isOverwrite = `optionVar -q "x3dFileOverwrite"`;
					text -label "    ";
					string $owChkBx = `checkBox -label "Overwrite Existing Texture and Audio Files" -v $isOverwrite -onc "optionVar -iv x3dFileOverwrite 1" -ofc "optionVar -iv x3dFileOverwrite 0"`;
				setParent ..;
		
				rowLayout -columnWidth2 20 510 -numberOfColumns 2;
					int $isRelURL = `optionVar -q "x3dUseRelURL"`;
					text -label "    ";
					string $relChkBx = `checkBox -label "Export Relative URLs" -v $isRelURL -onc "optionVar -iv x3dUseRelURL 1" -ofc "optionVar -iv x3dUseRelURL 0"`;
				setParent ..;
		
				rowLayout -columnWidth2 20 510 -numberOfColumns 2;
					int $isRelURLW = `optionVar -q "x3dUseRelURLW"`;
					text -label "    ";
					string $relWChkBx = `checkBox -label "Export Relative URLs with Directory" -v $isRelURLW -onc "optionVar -iv x3dUseRelURLW 1" -ofc "optionVar -iv x3dUseRelURLW 0"`;
				setParent ..;
		
				rowLayout -columnWidth2 20 510 -numberOfColumns 2;
					int $isAbsURL = `optionVar -q "x3dUseAbsURL"`;
					text -label "    ";
					string $absChkBx = `checkBox -label "Export Base URLs" -v $isAbsURL -onc "optionVar -iv x3dUseAbsURL 1" -ofc "optionVar -iv x3dUseAbsURL 0"`;
				setParent ..;
		
				rowLayout -columnWidth1 530 -numberOfColumns 1;
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth3 20 200 310 -numberOfColumns 3;
					text -label "    ";
					text -label "Texture Options" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
					text -label "    ";
				setParent ..;//columnLayout

				rowLayout -columnWidth2 20 510 -numberOfColumns 2;
					int $isTexExport = `optionVar -q "x3dExportTextures"`;
					text -label "    ";
					string $texChkBx = `checkBox -label "Export Textures" -v $isTexExport -onc "optionVar -iv x3dExportTextures 1" -ofc "optionVar -iv x3dExportTextures 0"`;
				setParent ..;
				
				rowLayout -columnWidth1 530 -numberOfColumns 1;
					text -label "    " -h 8;
				setParent ..;//columnLayout
			
				rowLayout -columnWidth2 38 492 -numberOfColumns 2;
					text -label "    ";
					text -label "Image File Sub-directory: ";
				setParent ..;
				
				rowLayout -columnWidth3 38 300 192 -numberOfColumns 3;
					string $imagesDir = `optionVar -q "x3dTextureDirectory"`;
					text -label "    ";
					textField -text $imagesDir -cc "saveTextureDirectoryInfo" imageTF;
					text -label "    ";
				setParent ..;
				
				rowLayout -columnWidth1 530 -numberOfColumns 1;
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth3 20 200 310 -numberOfColumns 3;
					text -label "    ";
					text -label "Use Undesignated Information" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
					text -label "    ";
				setParent ..;//columnLayout
			
//				rowLayout -columnWidth2 40 490 -numberOfColumns 2;
//					int $isCPV = `optionVar -q "x3dCPV"`;
//					text -label "    ";
//					string $cpvChkBx = `checkBox -label " colorPerVertex" -v $isCPV -onc "optionVar -iv x3dCPV 1" -ofc "optionVar -iv x3dCPV 0"`;
//				setParent ..;
		
				rowLayout -columnWidth2 40 490 -numberOfColumns 2;
					int $isNPV = `optionVar -q "x3dNPV"`;
					text -label "    ";
					string $npvChkBx = `checkBox -label " normalPerVertex" -v $isNPV -onc "optionVar -iv x3dNPV 1" -ofc "optionVar -iv x3dNPV 0"`;
				setParent ..;
		
//				rowLayout -columnWidth2 40 490 -numberOfColumns 2;
//					int $isSolid = `optionVar -q "x3dSolid"`;
//					text -label "    ";
//					string $solidChkBx = `checkBox -label " solid" -v $isSolid -onc "optionVar -iv x3dSolid 1" -ofc "optionVar -iv x3dSolid 0"`;
//				setParent ..;
		
				rowLayout -columnWidth2 10 520 -numberOfColumns 2;
					float $caValue = `optionVar -q "x3dCreaseAngle"`;
					text -label "    ";
					floatSliderGrp -label "CreaseAngle" -field true -minValue 0.0 -maxValue 3.14 -value $caValue -cc "changeCreaseAngle" caControl;
				setParent ..;
		
				rowLayout -columnWidth1 530 -numberOfColumns 1;
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth3 20 200 310 -numberOfColumns 3;
					text -label "    ";
					text -label "Audio Options" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth2 20 510 -numberOfColumns 2;
					int $isAudExport = `optionVar -q "x3dExportAudio"`;
					text -label "    ";
					string $audChkBx = `checkBox -label "Export Audio" -v $isAudExport -onc "optionVar -iv x3dExportAudio 1" -ofc "optionVar -iv x3dExportAudio 0"`;
				setParent ..;

				rowLayout -columnWidth2 39 491 -numberOfColumns 2;
					text -label "    ";
					text -label "Audio File Sub-directory: ";
				setParent ..;
				
				rowLayout -columnWidth3 39 300 191 -numberOfColumns 3;
					string $audioDir = `optionVar -q "x3dAudioDirectory"`;
					text -label "    ";
					textField -text $audioDir -cc "saveAudioDirectoryInfo" audioTF;
					text -label "    ";
				setParent ..;
				
				rowLayout -columnWidth1 530 -numberOfColumns 1;
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth3 20 200 310 -numberOfColumns 3;
					text -label "    ";
					text -label "Inline Options" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth2 39 491 -numberOfColumns 2;
					text -label "    ";
					text -label "Inline File Sub-directory: ";
				setParent ..;
				
				rowLayout -columnWidth3 39 300 191 -numberOfColumns 3;
					string $inlineDir = `optionVar -q "x3dInlineDirectory"`;
					text -label "    ";
					textField -text $inlineDir -cc "saveInlineDirectoryInfo" inlineTF;
					text -label "    ";
				setParent ..;
				
				rowLayout -columnWidth1 530 -numberOfColumns 1;
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth3 20 200 310 -numberOfColumns 3;
					text -label "    ";
					text -label "URL Options" -h 20 -fn "smallBoldLabelFont" -rs true -al "left";
					text -label "    ";
				setParent ..;//columnLayout
			
				rowLayout -columnWidth2 39 491 -numberOfColumns 2;
					text -label "    ";
					text -label "Set Base URL To: ";
				setParent ..;
				
				rowLayout -columnWidth3 39 300 191 -numberOfColumns 3;
					string $baseURL = `optionVar -q "x3dBaseURL"`;
					text -label "    ";
					textField -text $baseURL -cc "saveBaseURLInfo" -ec "saveBaseURLInfo" baseTF;
					text -label "    ";
				setParent ..;
				
				rowLayout -columnWidth1 530 -numberOfColumns 1;
					text -label "    ";
				setParent ..;//columnLayout
			setParent ..;
		setParent ..;//columnLayout

		formLayout -e -vis true optionsBoxForm;
		setUITemplate -popTemplate;


	}else if($action=="query"){
	
		print("\nHere's a query.\n");
		$settings = "*";
		$settings = $settings + "x3dUseEmpties*";
		int $tempInt = `optionVar -q "x3dUseEmpties"`;
		$settings = $settings + $tempInt + "*";
		
		$settings = $settings + "x3dExportMetadata*";
		$tempInt = `optionVar -q "x3dExportMetadata"`;
		$settings = $settings + $tempInt + "*";
		
		$settings = $settings + "x3dConsolidateMedia*";
		$tempInt = `optionVar -q "x3dConsolidateMedia"`;
		$settings = $settings + $tempInt + "*";
		
		$settings = $settings + "x3dFileOverwrite*";
		$tempInt = `optionVar -q "x3dFileOverwrite"`;
		$settings = $settings + $tempInt + "*";
		
		$settings = $settings + "x3dExportTextures*";
		$tempInt = `optionVar -q "x3dExportTextures"`;
		$settings = $settings + $tempInt + "*";
		
		$settings = $settings + "x3dTextureDirectory*";
		string $tempString = " ";
		$tempString = `optionVar -q "x3dTextureDirectory"`;
		if($tempString == "") $tempString = " ";
		$settings = $settings + $tempString + "*";
		
		$settings = $settings + "x3dNPV*";
		$tempInt = `optionVar -q "x3dNPV"`;
		$settings = $settings + $tempInt + "*";
		
		$settings = $settings + "x3dCreaseAngle*";
		float $tempFloat = `optionVar -q "x3dCreaseAngle"`;
		$settings = $settings + $tempFloat + "*";
		
		$settings = $settings + "x3dExportAudio*";
		$tempInt = `optionVar -q "x3dExportAudio"`;
		$settings = $settings + $tempInt + "*";

//Componenets
						
		$settings = $settings + "x3dRigidBodyExport*";
		$tempInt = `optionVar -q "x3dRigidBodyExport"`;
		$settings = $settings + $tempInt + "*";

		$settings = $settings + "x3dNSHAnim*";
		$tempInt = `optionVar -q "x3dNSHAnim"`;
		$settings = $settings + $tempInt + "*";
		
		$settings = $settings + "x3dHAnimExport*";
		$tempInt = `optionVar -q "x3dHAnimExport"`;
		$settings = $settings + $tempInt + "*";//x3dIODeviceExport
		
		$settings = $settings + "x3dIODeviceExport*";
		$tempInt = `optionVar -q "x3dIODeviceExport"`;
		$settings = $settings + $tempInt + "*";//
		
		$intEnc = `optionVar -q exEncoding`;
		if($intEnc == 3)
		{
			$settings = $settings + "x3dBCFlag*";
			$tempInt = `optionVar -q "x3dBCFlag"`;
			$settings = $settings + $tempInt + "*";
		}
//		
		
		$settings = $settings + "x3dAudioDirectory*";
		$tempString = " ";
		$tempString = `optionVar -q "x3dAudioDirectory"`;
		if($tempString == "") $tempString = " ";
		$settings = $settings + $tempString + "*";
		
		$settings = $settings + "x3dInlineDirectory*";
		$tempString = " ";
		$tempString = `optionVar -q "x3dInlineDirectory"`;
		if($tempString == "") $tempString = " ";
		$settings = $settings + $tempString + "*";
		
		$settings = $settings + "x3dTextTempStore*";
		$tempString = `internalVar -utd`;
		$settings = $settings + $tempString + "*";
		
		$settings = $settings + "x3dUseRelURL*";
		$tempString = `optionVar -q "x3dUseRelURL"`;
		$settings = $settings + $tempString + "*";
		
		$settings = $settings + "x3dUseRelURLW*";
		$tempString = `optionVar -q "x3dUseRelURLW"`;
		$settings = $settings + $tempString + "*";
		
		$settings = $settings + "x3dBaseUrl*";
		$tempString = " ";
		if(`optionVar -q "x3dUseAbsURL"`)
		{
			$tempString = `optionVar -q "x3dBaseURL"`;
			if($tempString == "") $tempString=" ";
		}
		$settings =  $settings + $tempString;
		
		eval( $callback + "\"" + $settings + "\"" );
	}else{
		$vRawKee = 0;
	}
	
	return $vRawKee;
}


//------------------------------------------------------------------------------------
// Launches the system defualt web browser to load the NDSU ATL about documentation.
// The system attempts to look for this documentation in Maya's default 
// documentation folder.
//------------------------------------------------------------------------------------
global proc x3dShowAbout()
{
  showHelp -a "http://sourceforge.net/projects/rawkee/";
}


//------------------------------------------------------------------------------------
// Launches the system defualt web browser to load the ATL X3D Plug-in tutorials.
// The system attempts to look for this documentation in Maya's default 
// documentation folder.
//------------------------------------------------------------------------------------
global proc showX3DTutorials()
{
  showHelp -a "http://rawkee.sourceforge.net/tutorials/index.html";
}

//-------------------------------------------------------------------------
// MayaUI - Show the X3D Interaction Editor Window
//-------------------------------------------------------------------------
global proc showX3DIEditor()
{
	scriptedPanel -e -to x3dInteractionEditorPanel;
	fillEmptyPanes;
}

//-------------------------------------------------------------------------
// MayaUI - Create a window to handle the Route Editor 		

//-------------------------------------------------------------------------
global proc createX3DIEditor()
{
	scriptedPanel -e -to x3dInteractionEditorPanel;
	fillEmptyPanes;
}

//--------------------------------------------------------------
// Procedure to grab the coordIndex of a mesh node in order
// to set the scrollFeild in the x3dIndexedFaceSet attribute editor
// but will also just add the collected coordIndex as a single
// string to the x3dIndexedFaceSet node's "coordIndex" string attribute.
//--------------------------------------------------------------
global proc string checkTheCoordIndex(string $aMesh)//(string $aName)
{
//	string $meshName[] = `listRelatives -p $aName`;
//	int $nFaces[] = `polyEvaluate -f $meshName[0]`;
	int $nFaces[] = `polyEvaluate -f $aMesh`;
	string $indecies[];
	int $i;
	for($i=0;$i<$nFaces[0];$i++)
	{
//		string $tVert = $meshName[0]+".f["+$i+"]";
		string $tVert = $aMesh+".f["+$i+"]";
		string $vtxFace[] = `polyListComponentConversion -ff -tvf $tVert`;
		string $face[];
		
		int $pList = size($vtxFace);
		int $iFace = 0;
		int $j;
		for ( $j=0; $j<$pList;$j++)
		{

			string $vertecies[] = `polyListComponentConversion -fvf -tv $vtxFace[$j]`;
			int $nVerts = size($vertecies);
			int $k;
			for($k=0;$k<$nVerts;$k++)
			{
				string $chop1[];
				string $chop2[];
				string $chop3[];
				tokenize($vertecies[$k], "[", $chop1);
				tokenize($chop1[1], "]", $chop2);
				tokenize($chop2[0], ":", $chop3);
				int $c3 = size($chop3);
				if($c3>1)
				{
					int $cStart = $chop3[0];
					int $cStop = $chop3[1];
					int $cDif = $cStop - $cStart+1;
					int $l;
					for($l=0;$l<$cDif;$l++)
					{
						int $chop3Int = $chop3[0];
						$chop3Int = $chop3Int+$l;
						$face[$iFace] = $chop3Int;
						$iFace = $iFace+1;
					}
				}
				else
				{
					$face[$iFace] = $chop2[0];
					$iFace = $iFace+1;
				}
			}
		}
		for($j=0; $j<$iFace-1;$j++)
		{
			$indecies[$i] = $indecies[$i] + $face[$j] + " ";
		}
		$indecies[$i] = $indecies[$i]+$face[$iFace-1];
	}//--------June 15, 2004
	string $coordIndex;
	for($i=0; $i<$nFaces[0]-1; $i++)
	{
		$coordIndex = $coordIndex + $indecies[$i] + " -1 ";
	}
	$coordIndex = $coordIndex+$indecies[$nFaces[0]-1];
	return $coordIndex;
}
//--------------------------------------------------------------

global proc string checkTheNormalIndex(string $aMesh)
{
	int $nVerts[] = `polyEvaluate -v $aMesh`;
	string $normalIndex = ""; 
	int $i;
	int $j = 0;
	
	$npvVal = false;
	
	string $ifs[] = `listRelatives -c $aMesh`;
	if(`objExists $ifs[0]`)
	{
		if(`nodeType $ifs[0]` == "x3dIndexedFaceSet")
		{
			int $npvBool = `getAttr ($ifs[0]+".normalPerVertex")`;
			if($npvBool == true) $npvVal = true;
		}
		else
		{
			int $oVal = `optionVar -q "x3dNPV"`;
			if($oVal == 1) $npvVal = true;
		}
	}
	
	if($npvVal == true)
	{
		for($i=0;$i<$nVerts[0]-1;$i++)
		{
			$normalIndex = $normalIndex + $i + " ";
		}
		
		$normalIndex = $normalIndex + ($nVerts[0]-1);
	}
	return $normalIndex;
}

global proc string checkTheTexCoordIndex(string $aMesh)//(string $aName)
{
//	string $meshName[] = `listRelatives -p $aName`;
//	int $nFaces[] = `polyEvaluate -f $meshName[0]`;
	int $nFaces[] = `polyEvaluate -f $aMesh`;
	string $indecies[];
	int $i;
	for($i=0;$i<$nFaces[0];$i++)
	{
//		string $tVert = $meshName[0]+".f["+$i+"]";
		string $tVert = $aMesh+".f["+$i+"]";
		string $vtxFace[] = `polyListComponentConversion -ff -tvf $tVert`;
		string $face[];
		
		int $pList = size($vtxFace);
		int $iFace = 0;
		int $j;
		for ( $j=0; $j<$pList;$j++)
		{

			string $uvs[] = `polyListComponentConversion -fvf -tuv $vtxFace[$j]`;
			int $nVerts = size($uvs);
			int $k;
			for($k=0;$k<$nVerts;$k++)
			{
				string $chop1[];
				string $chop2[];
				string $chop3[];
				tokenize($uvs[$k], "[", $chop1);
				tokenize($chop1[1], "]", $chop2);
				tokenize($chop2[0], ":", $chop3);
				int $c3 = size($chop3);
				if($c3>1)
				{
					int $cStart = $chop3[0];
					int $cStop = $chop3[1];
					int $cDif = $cStop - $cStart+1;
					int $l;
					for($l=0;$l<$cDif;$l++)
					{
						int $chop3Int = $chop3[0];
						$chop3Int = $chop3Int+$l;
						$face[$iFace] = $chop3Int;
						$iFace = $iFace+1;
					}
				}
				else
				{
					$face[$iFace] = $chop2[0];
					$iFace = $iFace+1;
				}
			}
		}
		for($j=0; $j<$iFace-1;$j++)
		{
			$indecies[$i] = $indecies[$i] + $face[$j] + " ";
		}
		$indecies[$i] = $indecies[$i]+$face[$iFace-1];
	}//--------June 15, 2004
	string $texCoordIndex;
	for($i=0; $i<$nFaces[0]-1; $i++)
	{
		$texCoordIndex = $texCoordIndex + $indecies[$i] + " -1 ";
	}
	$texCoordIndex = $texCoordIndex+$indecies[$nFaces[0]-1];
	return $texCoordIndex;
}

global proc string checkTheColorIndex(string $aMesh)//(string $aName) 3444
{
//	string $meshName[] = `listRelatives -p $aName`;
//	int $nVerts[] = `polyEvaluate -v $meshName[0]`;
	int $nVerts[] = `polyEvaluate -v $aMesh`;
	string $colorIndex = ""; 
	int $i;
	int $j = 0;
	
	$cpvVal = false;
	
	string $ifs[] = `listRelatives -c $aMesh`;
	if(`objExists $ifs[0]`)
	{
		if(`nodeType $ifs[0]` == "x3dIndexedFaceSet")
		{
			int $cpvBool = `getAttr ($ifs[0]+".colorPerVertex")`;
			if($cpvBool == true) $cpvVal = true;
		}
		else
		{//3443
			int $oVal = `optionVar -q "x3dCPV"`;
			if($oVal == 1) $cpvBool = true;
		}
	}
	
	if($cpvVal = true)
	{
		for($i=0;$i<$nVerts[0]-1;$i++)
		{
			$colorIndex = $colorIndex + $i + " ";
		}
		$colorIndex = $colorIndex + ($nVerts[0]-1);
	}
	else{
		int $nFaces[] = `polyEvaluate -f $aMesh`;
		for($i=0; $i < $nFaces[0]-1; $i++)
		{
			$colorIndex = $colorIndex + $i + " ";
		}
		$colorIndex = $colorIndex + ($nFaces[0]-1);
	}
	return $colorIndex;
}

//--------------------------------------------------------------
// Procedure to grab the color values of a mesh node in order
// to set the scrollFeild in the x3dColor or x3dColorRGBA attribute
// editor but will also just add the collected color values as a
// single string to the x3dColor node's "color" string attribute.
//--------------------------------------------------------------
global proc string checkTheColors(string $aMesh, int $isAlpha)//(string $aName, int $isAlpha)
{
	string $colorList = "";
	string $nodeType = `nodeType $aMesh`;
	if($nodeType == "mesh")
	{
		string $myChild[] = `listRelatives -c $aMesh`;
		string $cpvAtt = $myChild[0]+".colorPerVertex";
		int $isCPV = 1;
		if(`objExists $myChild[0]`)
		{
			if(`attributeExists "colorPerVertex" $myChild[0]`) $isCPV = `getAttr ($myChild[0]+".colorPerVertex")`;
		}
		string $colors[];
		int $fLength[];
		int $vLength[];
		if($isCPV)
		{
			$vLength = `polyEvaluate -v $aMesh`;
			int $i;
			for($i=0;$i<$vLength[0];$i++)
			{
				string $cName = $aMesh+".vtx["+$i+"]";
				float $colorRGBA[4]= `polyColorPerVertex -q -r -g -b -a $cName`;
				if($isAlpha)
				{
					$colors[$i] = $colorRGBA[0]+" "+$colorRGBA[1]+" "+$colorRGBA[2]+" "+$colorRGBA[3];
				}
				else
				{
					$colors[$i] = $colorRGBA[0]+" "+$colorRGBA[1]+" "+$colorRGBA[2];
				}
			}
		}
		else
		{
			$fLength = `polyEvaluate -f $aMesh`;
			int $i;
			for($i=0;$i<$fLength[0];$i++)
			{
				string $fName = $aMesh+".f["+$i+"]";
				string $vtxFaces[] = `polyListComponentConversion -ff -tvf $fName`;
			
				string $piOrder[];
				int $vfLength = size($vtxFaces);
				int $j;
				for ($j=0; $j<$vfLength; $j++)
				{
					string $point[] = `polyListComponentConversion -fvf -tv $vtxFaces[$j]`;
					$piOrder[$i] = $point[0];
				}
				int $piLength = size($piOrder);
				float $colorRGBA[4] = {0,0,0,0};
				for($j=0;$j<$piLength;$j++)
				{
					float $tColor[] = `polyColorPerVertex -q -r -g -b -a $piOrder[$j]`; 
					$colorRGBA[0] = $colorRGBA[0]+$tColor[0];
					$colorRGBA[1] = $colorRGBA[1]+$tColor[1];
					$colorRGBA[2] = $colorRGBA[2]+$tColor[2];
					$colorRGBA[3] = $colorRGBA[3]+$tColor[3];
				}
				for($j=0;$j<4;$j++)
				{
					$colorRGBA[$j] = $colorRGBA[$j]/$piLength;
				}
				if($isAlpha)
				{
					$colors[$i] = $colorRGBA[0]+" "+$colorRGBA[1]+" "+$colorRGBA[2]+" "+$colorRGBA[3];
				}
				else
				{
					$colors[$i] = $colorRGBA[0]+" "+$colorRGBA[1]+" "+$colorRGBA[2];
				}
			}
		}
		int $cLength = size($colors);
//		print("Faces according to Maya: "+$fLength[0]+", Colors according to my array: "+$cLength+", Vertices according to Maya: "+$vLength[0]+"\n");
		for($i=0;$i<$cLength-1;$i++)
		{
			if($i!=$cLength-1) $colorList = $colorList+ $colors[$i] + ", ";
		}
		$colorList = $colorList + $colors[$cLength-1];
	}
	else
	{
		$colorList = "";//This x3dColor node was attached to the scenegraph incorrectly. It is to be used as an underworld node only. Please delete this node.";
		print("Error --- this color node (x3dColor/x3dColorRGBA is not properly placed within the scenegraph\n");
	}
//	if(`scrollField -exists colorScroll`) scrollField -e -tx $colorList -ww true -w 400 -h 100 colorScroll;
	return $colorList;
}
//--------------------------------------------------------------

//--------------------------------------------------------------
// Procedure to grab the coordinates of a mesh node in order
// to set the scrollFeild in the x3dTextureCoordinate attribute 
// editor but will also just add the collected coordinates as a 
// single string to the x3dTextureCoordinate node's "point" 
// string attribute.
//--------------------------------------------------------------
global proc string checkTheUVCoordinates(string $aMesh)//(string $aName)
{
	string $tCoordinateList = "";
	string $nodeType = `nodeType $aMesh`;
	if($nodeType == "mesh")
	{
		int $uvcLength[];
		string $points[];
		$uvcLength = `polyEvaluate -uv $aMesh`;
		int $i;
		for($i=0;$i<$uvcLength[0];$i++)
		{
			string $pName = $aMesh+".map["+$i+"]";
			float $point2D[2] = `polyEditUV -q -u -v $pName`;
			$points[$i] = $point2D[0]+" "+$point2D[1];
		}
		int $pLength = size($points);
//		print("UV's according to my array: "+$pLength+", MapUV's according to Maya: "+$uvcLength[0]+"\n");
		for($i=0;$i<$pLength-1;$i++)
		{
			if($i!=$pLength-1) $tCoordinateList = $tCoordinateList + $points[$i]+", ";
		}
		$tCoordinateList = $tCoordinateList + $points[$pLength-1];
	}
	else
	{
		$tCoordinateList = "";//This x3dTextureCoordinate node was attached to the scenegraph incorrectly. It is to be used as an underworld node only. Please delete this node.";
		print("Error --- this x3dTextureCoordinate node is not properly placed within the scenegraph\n");
	}
//	if(`scrollField -exists tCoordinateScroll`) scrollField -e -tx $tCoordinateList -ww true -w 400 -h 100 tCoordinateScroll;
	return $tCoordinateList;
}
//--------------------------------------------------------------


//--------------------------------------------------------------
// Procedure to grab the coordinates of a mesh node in order
// to set the scrollFeild in the x3dCoordinate attribute editor
// but will also just add the collected coordinates as a single
// string to the x3dCoordinate node's "point" string attribute.
//--------------------------------------------------------------
global proc string checkTheCoordinates(string $aMesh)//(string $aName)
{
	string $nodeType = `nodeType $aMesh`;
	string $coordinateList = "";
	if($nodeType == "mesh")
	{
		string $points[];
		int $vLength[] = `polyEvaluate -v $aMesh`;
		int $i;
		for($i=0;$i<$vLength[0];$i++)
		{
			string $pName = $aMesh+".vtx["+$i+"]";
			float $point3D[3] = `xform -query -t $pName`;
			$points[$i] = $point3D[0]+" "+$point3D[1]+" "+$point3D[2];
		}
		int $pLength = size($points);
//		print("Points according to my array: "+$pLength+", Vertices according to Maya: "+$vLength[0]+"\n");
		for($i=0;$i<$pLength-1;$i++)
		{
//			$coordinateList = $coordinateList + $points[$i];
			$coordinateList = $coordinateList + $points[$i]+", ";
		}
		$coordinateList = $coordinateList + $points[$pLength-1];
	}
	else
	{
		$coordinateList = "";//This x3dCoordinate node was attached to the scenegraph incorrectly. It is to be used as an underworld node only. Please delete this node.";
		print("Error --- x3dCoordinate node is not properly placed within the scenegraph\n");
	}
//	if(`scrollField -exists coordinateScroll`) scrollField -e -tx $coordinateList -ww true -w 400 -h 100 coordinateScroll;
	return $coordinateList;
}
//--------------------------------------------------------------

//--------------------------------------------------------------
// Procedure to grab normals from a mesh node in order to set
// the scrollField in the x3dNormal attribute editor
// but will also just add the collected normals as a single
// string to the x3dNormal node's "vector" string attribute.
//--------------------------------------------------------------
global proc string checkTheNormals(string $aMesh)//(string $aName)
{
	string $normalList = "";
	string $nodeType = `nodeType $aMesh`;
	if($nodeType == "mesh")
	{
		string $myChild[] = `listRelatives -c $aMesh`;
		string $npvAtt = $myChild[0]+".normalPerVertex";
		int $isNPV = 1;
		if(`objExists $myChild[0]`) if(`attributeExists "normalPerVertex" $myChild[0]`) $isNpv = `getAttr $npvAtt`;
		
		string $vecNorm[];
		int $vLength[] = `polyEvaluate -v $aMesh`;
		int $fLength[] = `polyEvaluate -f $aMesh`;
		int $i;
		
		if($isNPV)
		{//normals per vertex used in every situation except where both no normal node is used and normalPerVertex is false
			for($i=0;$i<$vLength[0];$i++)
			{
				float $thisVertX[];
				float $thisVertY[];
				float $thisVertZ[];
				string $cVerts = $aMesh+".vtx["+$i+"]";
//				select -r $cVerts;
				$thisVertX = `polyNormalPerVertex -q -x $cVerts`;
				$thisVertY = `polyNormalPerVertex -q -y $cVerts`;
				$thisVertZ = `polyNormalPerVertex -q -z $cVerts`;
				int $cvSize = size($thisVertX);
				int $j;
				float $x3dVecs[] = {0,0,0};
				for($j=0;$j<$cvSize;$j++)
				{
					$x3dVecs[0] = $x3dVecs[0]+ $thisVertX[$j];
					$x3dVecs[1] = $x3dVecs[1]+ $thisVertY[$j];
					$x3dVecs[2] = $x3dVecs[2]+ $thisVertZ[$j];
				}
				$x3dVecs[0] = $x3dVecs[0]/$cvSize;
				$x3dVecs[1] = $x3dVecs[1]/$cvSize;
				$x3dVecs[2] = $x3dVecs[2]/$cvSize;
				$vecNorm[$i] = $x3dVecs[0]+" "+$x3dVecs[1]+" "+$x3dVecs[2];
			}
		}
		else
		{
			for($i=0;$i<$fLength[0];$i++){
				string $fVerts = $aMesh+".f["+$i+"]";
				string $fnString[] = `polyInfo -fn $fVerts`;
				string $vecToke[];
				tokenize($fnString[0], " ", $vecToke);
				
				string $noCR[];
				tokenize($vecToke[4], "\n", $noCR);

				$vecNorm[$i] = $vecToke[2]+" "+$vecToke[3]+" "+$noCR[0];
			}
		}
		int $vnLength = size($vecNorm);
//		print("Faces according to Maya: "+$fLength[0]+", Normals according to my array: "+$vnLength+", Vertices according to Maya: "+$vLength[0]+"\n");
		for($i=0;$i<$vnLength-1;$i++)
		{
//			$normalList = $normalList + $vecNorm[$i];
			$normalList = $normalList + $vecNorm[$i]+", ";
		}
		$normalList = $normalList + $vecNorm[$vnLength-1];
	}
	else
	{
		$normalList = "";//This x3dNormal node was attached to the scenegraph incorrectly. It is to be used as an underworld node only. Please delete this node.";
		print("Error --- x3dNormal node is not properly placed within the scenegraph\n");
	}
//	if(`scrollField -exists normalScroll`) scrollField -e -tx $normalList -ww true -w 400 -h 100 normalScroll;
	return $normalList;
}

//--------------------------------------------------------------
// procedure for suppressing default MPxTransform attributes in
// the attribute editor
//--------------------------------------------------------------
global proc x3dMPxTransformSuppression()
{
	editorTemplate -suppress "translate";
	editorTemplate -suppress "rotate";
	editorTemplate -suppress "rotateOrder";
	editorTemplate -suppress "scale";
	editorTemplate -suppress "shear";
	editorTemplate -suppress "rotatePivot";
	editorTemplate -suppress "rotatePivotTranslate";
	editorTemplate -suppress "scalePivot";
	editorTemplate -suppress "scalePivotTranslate";
	editorTemplate -suppress "rotateAxis";
	editorTemplate -suppress "minTransLimit";
	editorTemplate -suppress "maxTransLimit";
	editorTemplate -suppress "minRotLimit";
	editorTemplate -suppress "maxRotLimit";
	editorTemplate -suppress "minScaleLimit";
	editorTemplate -suppress "maxScaleLimit";
	editorTemplate -suppress "geometry";
	editorTemplate -suppress "selectHandle";
	editorTemplate -suppress "rotateQuaternion";
	editorTemplate -suppress "showManipDefault";
	editorTemplate -suppress "dynamics";
	editorTemplate -suppress "displayRotatePivot";
	editorTemplate -suppress "displayHandle";
	editorTemplate -suppress "inheritsTransform";
	editorTemplate -suppress "displayScalePivot";
	editorTemplate -suppress "displayLocalAxis";
	editorTemplate -suppress "maxScaleLimitEnable";
	editorTemplate -suppress "minScaleLimitEnable";
	editorTemplate -suppress "maxRotLimitEnable";
	editorTemplate -suppress "minRotLimitEnable";
	editorTemplate -suppress "maxTransLimitEnable";
	editorTemplate -suppress "minTransLimitEnable";
	editorTemplate -suppress "mentalRayControls";
}

//--------------------------------------------------------------
// procedure for suppressing default maya attributes in the
// attribute editor
//--------------------------------------------------------------
global proc x3dOptionSuppression()
{
//	editorTemplate -addExtraControls;
	editorTemplate -suppress "input";
	editorTemplate -suppress "caching";
	editorTemplate -suppress "nodeState";
	editorTemplate -suppress "localPosition";
//	editorTemplate -suppress "source";
	 
	editorTemplate -suppress "compInstObjGroups";
	editorTemplate -suppress "instObjGroups";
	editorTemplate -suppress "xWidth";
	editorTemplate -suppress "zWidth";
	editorTemplate -suppress "dispType";
	editorTemplate -suppress "antialiasingLevel";
	editorTemplate -suppress "shadingSamples";
	editorTemplate -suppress "maxShadingSamples";
	editorTemplate -suppress "maxVisibilitySamplesOverride";
	editorTemplate -suppress "maxVisibilitySamples";
	editorTemplate -suppress "volumeSamples";
	editorTemplate -suppress "opposite";
	editorTemplate -suppress "castsShadows";
	editorTemplate -suppress "receiveShadows";
	editorTemplate -suppress "motionBlur";
	editorTemplate -suppress "primaryVisibility";
	editorTemplate -suppress "visibleInReflections";
	editorTemplate -suppress "visibleInRefractions";
	editorTemplate -suppress "doubleSided";
	editorTemplate -suppress "opposite";
	editorTemplate -suppress "geometryAntialiasingOverride";
	editorTemplate -suppress "antialiasingLevel";
	editorTemplate -suppress "shadingSamplesOverride";
	editorTemplate -suppress "volumeSamplesOverride";
	editorTemplate -suppress "depthJitter";
	editorTemplate -suppress "boundingBoxScale"; 
	editorTemplate -suppress "featureDisplacement";
	editorTemplate -suppress "initialSampleRate";
	editorTemplate -suppress "extraSampleRate";
	editorTemplate -suppress "textureThreshold";
	editorTemplate -suppress "normalThreshold";
	editorTemplate -suppress "visibility";
	editorTemplate -suppress "intermediateObject";
	editorTemplate -suppress "template";
	editorTemplate -suppress "ghosting";
	editorTemplate -suppress "useObjectColor";
	editorTemplate -suppress "objectColor";
	editorTemplate -suppress "drawOverride";
	editorTemplate -suppress "lodVisibility";
	editorTemplate -suppress "renderInfo";
	editorTemplate -suppress "ghostingControl";
	editorTemplate -suppress "ghostCustomSteps";
	editorTemplate -suppress "ghostFrames";
	editorTemplate -suppress "ghostRangeStart";
	editorTemplate -suppress "ghostRangeEnd";
	editorTemplate -suppress "ghostDriver";
	editorTemplate -suppress "ignoreSelfShadowing";
	editorTemplate -suppress "metadata";
	editorTemplate -suppress "x3dMetadataOut";
	editorTemplate -suppress "x3dMetadataIn";
	editorTemplate -suppress "audioOut";
	editorTemplate -suppress "audioIn";
}

global proc saveTextureDirectoryInfo()
{
	if(`textField -ex imageTF`)
	{
		string $x3dTextDir = `textField -q -text imageTF`;
		optionVar -sv "x3dTextureDirectory" $x3dTextDir;
	}
}

global proc saveAudioDirectoryInfo()
{
	if(`textField -ex audioTF`)
	{
		string $x3dAudDir = `textField -q -text audioTF`;
		optionVar -sv "x3dAudioDirectory" $x3dAudDir;
	}
}

global proc saveInlineDirectoryInfo()
{
	if(`textField -ex inlineTF`)
	{
		string $x3dInlDir = `textField -q -text inlineTF`;
		optionVar -sv "x3dInlineDirectory" $x3dInlDir;
	}
}

global proc saveBaseURLInfo()
{
	if(`textField -ex baseTF`)
	{
		string $x3dBURL = `textField -q -text baseTF`;
		optionVar -sv "x3dBaseURL" $x3dBURL;
	}
}

global proc saveLaunchExternalCommand()
{
	if(`textField -ex launchTF`)
	{
		string $x3dLauncher = `textField -q -text launchTF`;
		optionVar -sv "x3dExternalViewerCommand" $x3dLauncher;
	}
}

global proc changeTextHeight()
{
	int $iValue = `intField -q -v textHeight`;
	optionVar -iv "x3dTextureHeight" $iValue;
}

global proc changeTextWidth()
{
	int $iValue = `intField -q -v textWidth`;
	optionVar -iv "x3dTextureWidth" $iValue;
}

global proc setX3DExternalPixel(int $iValue)
{
	optionVar -iv "x3dExternalPixel" $iValue;
}

global proc setX3DInternalPixel(int $iValue)
{
	optionVar -iv "x3dInternalPixel" $iValue;
}

global proc setX3DAdjTexSize(int $iValue)
{
	optionVar -iv "x3dAdjustTextureSize" $iValue;
}

global proc string chopCoordList(string $coordList)
{
	string $chopped = $coordList;
	return $chopped;
}

global proc string chopNormalList(string $normList)
{
	string $chopped = $normList;
	return $chopped;
}

global proc string chopTexCoordList(string $texCoordList)
{
	string $chopped = $texCoordList;
	return $chopped;
}

global proc string chopColorList(string $colorList)
{
	string $chopped = $colorList;
	return $chopped;
}

global proc int lookingForCPV(string $aName)
{
	int $isCPV = 0;
	string $cons[] = `listConnections -s ($aName+".inputPolymesh")`;
			string $breakDown[];
			tokenize($cons[0],".",$breakDown);
			if(`objExists $breakDown[0]`)
			{
				string $nType = `nodeType $breakDown[0]`;
				if($nType == "polyColorPerVertex") $cvpVal = true;
				else{
					if(`attributeExists "inputPolymesh" $breakDown[0]`) $isCPV = lookingForCPV($breakDown[0]);
				}
			}
	return $isCPV;
}

global proc changeCreaseAngle()
{
	if(`floatSliderGrp -exists caControl`){
		float $fValue = `floatSliderGrp -q -v caControl`;
		optionVar -fv "x3dCreaseAngle" $fValue;
	}
}

global proc x3dChangeJavaMemory()
{
	if(`intSliderGrp -exists javaMemControl`){
		int $iValue = `intSliderGrp -q -v javaMemControl`;
		optionVar -iv "x3dJavaMemory" $iValue;
	}
}

global proc setNewLostUVDef()
{
	if(`floatField -exists lostUVControl`){
		float $fValue = `floatField -q -v lostUVControl`;
		optionVar -fv "x3dLostUV" $fValue;
	}
}

global proc forceAERefresh(string $nodeName)
{
	if(`objExists ($nodeName+".x3dCheckIt")`) deleteAttr ($nodeName+".x3dCheckIt");
	else
	{
		addAttr -ln "x3dNoCheck" -h true -at bool $nodeName;
		renameAttr ($nodeName+".x3dNoCheck") x3dCheckIt;
	}
}

global proc setX3DProcTreeTrue()
{
	optionVar -iv x3dIsProcTree 1;
}

global proc setX3DProcTreeFalse()
{
	optionVar -iv x3dIsProcTree 0;
}

//global proc int getX3DProcTreeValue()
//{
//	int aValue = `optionVar -q x3dIsProcTree`;
//	return aValue;
//}